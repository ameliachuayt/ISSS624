---
title: "In-class Exercise 1"
editor: visual
number-sections: true
---

## Overview

In this in-class exercise, I learned how to compute spatial weights using R. Detailed objectives are as follows::

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute spatial weights using appropriate functions of **spdep** package, and

-   calculate spatially lagged variables using appropriate functions of **spdep** package.

## Study Area and Data

Two data sets will be used in this hands-on exercise, they are:

-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.

## Getting Started

The code chunk below will install and load **sf**, **spdep**, **tmap** and **tidyverse** packages.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Import Data into R Environment

### Importing shape file into R

The code chunk below will import ESRI shape file into R.

```{r}
hunan <- st_read(dsn = "data\\geospatial",
                layer = "Hunan")
```

The output shows that there are 88 multipolygon features and 7 fields.

### Import csv file into R

The code chunk below uses *read_csv()* of **readr** package to import `Hunan_2012` csv file into R. The output R object is called `hunan_2012` and is in R dataframe class.

```{r}

hunan2012<- read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join

The code chunk below will be used to update the attribute table of hunan's SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan, hunan2012)
```

### Visualising Regional Development Indicator

The code chunk below is used to prepare two stand-alone maps: a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *gtm()* of **tmap** package. Then by using *tmap_arrange()* of **tmap** package, we will create a facet map.

Note that:

-   GDPPC refers to Gross Domestic Product per capita.

-   *qtm()* allows us to plot thematic maps quickly.

```{r}
basemap <- tm_shape(hunan) + 
  tm_polygons() +
  tm_text("NAME_3", size = 0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap,gdppc, asp = 1, ncol = 2)
```

## Computing Contiguity Spatial Weight

In this section, I learned how to use [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. This function allows us to pass a "queen" argument that takes TRUE or FALSE as options. The default is set to TRUE, which means that the function will return a list of first order neighbours using the Queen criteria by default.

### Computing (Queen) contiguity based neighbours

The code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two least connected region with only one neighbour.

For each polygon in our polygon object, *wm_q* lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.

We can use the code chunk below to retrieve county name of Polygon ID = 1. The output reveals that Polygon ID=1 is Anxiang county.

```{r}
hunan$County[1]
```

To reveal the county names of Anxiang county's five neighboring polygons, the code chunk will be used:

```{r}
hunan$County[c(2, 3,4, 57, 85)]
```

Alternatively, we can combine the earlier steps to identify the five neighbours and get their names into one code chunk.

```{r}
hunan$County[wm_q[[1]]]
```

Next, let's retrieve the GDPPC of these five counties.

```{r}
nb1 <- wm_q[[1]]
gdp1 <- hunan$GDPPC[nb1]
gdp1
```

The printed output above shows that the GDPPC of the five nearest neighbours based on Queen's method are 20981, 34592, 24473, 21311 and 22879 respectively.

::: callout-tip
We can combine them the names and GDPPC into a matrix by using *cbind()*.

```{r}
cbind(hunan$County[wm_q[[1]]], gdp1)
```
:::

You can display the complete weight matrix by using *str()*.

```{r}
str(wm_q)
```

### Creating (ROOK) contiguity based on neighbours

The code chunk below is used to compute Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan, queen = FALSE)
summary(wm_r)
```

The summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two least connected regions with only one neighbours.

### Visualising contiguity weights

A connectivity graph takes a point and displays a line to each neighboring point. Since we are working with polygons, we will need to get points in order to make our connectivity graphs. The most commonly used method to get points is to take the centroids of the polygons. We will calculate these in the **sf** package before moving onto the graphs.

#### Getting Latitude and Longitude of Polygon Centroids

We need to associate each polygon with a point before we can make our connectivity graph. It will be a little more complicated than just running *st_centroid()* on the **sf** object: `hunan`. I need the coordinates in a separate data frame for this to work. To do this I will use a mapping function.

The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of `hunan`. Our function will be *st_centroid()*. We will be using *map_dbl()* variation of [map](https://www.rdocumentation.org/packages/purrr/versions/0.2.5/topics/map) from the **purrr** package. **purrr** is loaded when we load **tidyverse**.

To get our longitude values we map the *st_centroid()* function over the geometry column of `hunan` and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, I used cbind to put longitude and latitude into the same object. We should check the first few observations to see if things are formatted correctly.

```{r}
coords <- cbind(longitude, latitude)
head(coords, 5)
```

#### Plotting Queen contiguity based neighbours map

With the coordinates for each county, we can plot the neighbors through a connectivity graph.

Notes on the arguments used in *plot()*:

-   *pch*: plotting symbols available. '19' refers to solid circles. Detailed list can be found [here](http://www.sthda.com/english/wiki/r-plot-pch-symbols-the-different-point-shapes-available-in-r).

-   *add:* adds the current plot onto the previous plot

-   *cex*: a numerical value giving the amount by which plotting text and symbols should be magnified relative to the default

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### Plotting both Queen and Rook contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

Since the [queen criterion is somewhat more encompassing than rook criterion](https://geodacenter.github.io/workbook/4a_contig_weights/lab4a.html#rook-contiguity), the number of neighbors according to the queen criterion will always be at least as large as for the rook criterion. We can observe this in the above maps as well.

-   Rook criterion: defines neighbors by the existence of a common edge between two spatial units.

-   Queen criterion: defines neighbors as spatial units sharing a common edge or a common vertex.

## Computing distance based neighbours

In this section, I learned how to derive distance-based weight matrices by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of **spdep** package.

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

    dnearneigh(x, d1, d2, row.names = NULL, longlat = NULL, bounds=c("GE", "LE"),
     use_kd_tree=TRUE, symtest=FALSE, use_s2=packageVersion("s2") > "1.0.7", k=200,
     dwithin=TRUE)

### Determine the cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep.**

        knearneigh(x, k=1, longlat = NULL, use_kd_tree=TRUE)

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
k1 <- knn2nb(knearneigh(coords, k=1)) #default k = 1
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
head(k1dists,5)

```

```{r}
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### Computing fixed distance weight matrix

Now, we will compute the distance weight matrix by using [dnearneigh()](https://r-spatial.github.io/spdep/reference/dnearneigh.html)as shown below.

```{r}
wm_d62 <- dnearneigh(coords,0,62, longlat = TRUE)
wm_d62
```

From the output, we see that the average number of links is 3.68. This means that on average, the number of links each polygons has 3.68.

Next, we will use *str()* to display the content of wm_d62 weight matrix.

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine [*table()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/table) and [*card()*](https://r-spatial.github.io/spdep/reference/card.html) of **spdep**.

```{r}
table(hunan$County, card(wm_d62))
```

`n.comp.nb()` finds the number of disjoint connected subgraphs in the graph depicted by `nb.obj` - a spatial neighbours list object.

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp
```

```{r}
table(n_comp$comp.id)
```

#### Plotting fixed distance weight matrix

Next, I will plot the distance weight matrix by using the code chunk below.

```{r}
plot(hunan$geometry, border = 'lightgrey') #base map
plot(wm_d62, coords, add = TRUE) #neighbours within 62km
plot(k1, coords, add = TRUE, col = 'red', length = 0.8) #1st nearest neigbours
```

```{r}
par(mfrow = c(1,2))
plot(hunan$geometry, border = "lightgrey")
plot(k1, coords, add = TRUE, col = "red", length = 0.88, main="1st nearest neighbours")

plot(hunan$geometry, border = "lightgrey")
plot(wm_d62, coords, add = TRUE, pch = 19, cex = 0.6, main = "Distance Link")
```

### Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Since we set k=6, the average number of links is also 6 since each county has 6 neighbours.

Similarly, we can display the content of the matrix by using *str()*. Notice that each county has exactly 6 neighbours.

```{r}
str(knn6)
```

#### Plotting distance based neighbours

We can plot the weight matrix using the code chunk below.

```{r}
plot(hunan$geometry, color = 'lightgrey')
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = 'red')
```

## Weights based on IDW

In this section, I learned how to derive a spatial weight matrix based on Inversed Distance method.

Firstly, let's compute the distances between areas by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x)) #i.e. inverse distance = 1/distance
head(ids,10)
```

### Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned **equal weight** (style=\"W\"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.

While this is the most intuitive way to summarise the neighbors\' values, it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.

For this example, we\'ll stick with the style=\"W\" option for simplicity\'s sake but note that other more robust options are available, notably style=\"B\".

The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
rswm_q
```

To see the weight of the first polygon\'s four neighbors type:

```{r}
rswm_q$weights[1]
```

Each neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor\'s income will be multiplied by 0.2 before being tallied.

Using the same method, we can also derive a **row standardised distance weight matrix** by using the code chunk below.

```{r}
rswm_ids <- nb2listw(wm_q, glist = ids, style = "B", zero.policy = TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

In this section, I learned how to create four different spatial lagged variables, they are:

-   spatial lag with row-standardized weights,

-   spatial lag as a sum of neighbouring values,

-   spatial window average and

-   spatial window sum.

### Spatial lag with row-standardised weights

Finally, we\'ll compute the **average neighbor GDPPC** value for each polygon. These values are often referred to as **spatially lagged values**.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Recall that in the previous section, we retrieved the GDPPC of these five counties by using the code chunk below

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

::: {.callout-note icon="false"}
Question: Can you see the meaning of Spatial lag with row-standardized weights now?

```{r}
mean(nb1)
```

Taking the mean of the GDPPC of the five neighbours of county 1 will return the same value as the first value of GDPPC.lag.
:::

We can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.

```{r}
lag.list <- list(hunan$County, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("County", "lag GDPPC")
lag.res
```

```{r}
hunan <- left_join(hunan, lag.res)
```

The following table shows the average neighboring income values (stored in the Inc.lag object) for each county.

```{r}
head(hunan)
```

Next, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp = 1, ncol =2)
```

### Spatial lag as a sum of neighbouring values

### 

## References

https://spatialanalysis.github.io/handsonspatialdata/contiguity-based-spatial-weights.html
