[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I’m a Masters student at the Singapore Management University. This website documents my learning journey in geospatial analytics."
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "",
    "text": "There are two parts in this hands-on exercise:"
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#overview-of-geospatial-data-wrangling",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#overview-of-geospatial-data-wrangling",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "1.1 Overview of Geospatial Data Wrangling",
    "text": "1.1 Overview of Geospatial Data Wrangling\nIn the first of this two-part hands-on exercise, I learned how to import, and wrangle geospatial data using appropriate R packages."
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#data-acquisition",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#data-acquisition",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "1.2 Data Acquisition",
    "text": "1.2 Data Acquisition\nData are key to data analytics including geospatial analytics. Hence, before analysing, we need to assemble the necessary data. For this hands-on exercise, data sets were extracted from the following sources:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb"
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "1.3 Getting Started",
    "text": "1.3 Getting Started\nThe code chunk below installs and loads sf and tidyverse packages into R environment. pacman() is a R package management tool. It provides intuitively named functions for the base functions.\n\n\nShow the code\npacman::p_load(sf, tidyverse)\n\n\nAn alternate way to install and import the libraries is as follows:\n\n\nShow the code\npackages = c('sf','tidyverse')\nfor (p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}"
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#import-geospatial-data",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#import-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "1.4 Import Geospatial Data",
    "text": "1.4 Import Geospatial Data\nIn this section, I learned how to import the following geospatial data into R by using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n1.4.1 Import polygon feature date in shapefile format\nThe code chunk below uses st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame.\nWhen the input geospatial data is in shapefile format (.shp), two arguments will be used: dsn to define the data path and layer to provide the shapefile name. No extensions such as .shp, .dbf, .prj and .shx are reqquired.\n\n\nShow the code\nmpsz = st_read(dsn=\"data\\\\geospatial\",\n               layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\ameliachuayt\\ISSS624\\Exercises\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe output shows that there are 323 multipolygon features and 15 fields. The Bounding box provides the x extend and y extend of the data.\n\n\n1.4.2 Import polyline feature data in shapefile form\nThe code chunk below uses st_read() function of sf package to import CyclingPath shapefile into R as a line feature data frame.\n\n\nShow the code\ncyclingpath = st_read(dsn = \"data\\\\geospatial\",\n                      layer = 'CyclingPath')\n\n\nReading layer `CyclingPath' from data source \n  `C:\\ameliachuayt\\ISSS624\\Exercises\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe output shows that there are 1625 features and 2 fields in CyclingPath linestring feature data frame and it is in svy21 projected coordinates system.\n\n\n1.4.3 Import GIS data in kml format\nThe code chunk below uses st_read() function of sf package to import pre-schools-location-kml kml file into R as a point feature layer. Since we are dealing with a kml file, instead of specifying dsn and layer, we specify the complete path and file extension.\n\n\nShow the code\npreschool = st_read(\"data\\\\geospatial\\\\pre-schools-location-kml.kml\")\n\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\ameliachuayt\\ISSS624\\Exercises\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThe output reveals that preschool is a point feature data frame (see “Geometry type: POINT’”). There are a total of 1359 features and 2 fields. Different from the previous two simple feature data frame, preschool is in wgs84 coordinates system (see “Geodetic CRS: WGS 84”)."
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "1.5 Checking the Content of A Simple Feature Data Frame",
    "text": "1.5 Checking the Content of A Simple Feature Data Frame\nIn the section, I learned different ways to retrieve information related to the contents of a simple feature data frame.\n\n1.5.1 Working with st_geometry()\nThe column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry() as shown in the code chunk below.\n\n\nShow the code\nst_geometry(mpsz)\n\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nThe output displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.\n\n\n1.5.2 Working with glimpse().\nTo learn more about the associated attribute information in the data frame, we can use glimpse() of dplyr.\n\n\nShow the code\nglimpse(mpsz)\n\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nAs we can see in the output, glimpse() reveals the data type of each field.\nFor example, FMEL-UPD_D is in date data ‘<date>’, and X_ADDR, Y_ADDR are in double precision values ‘<dbl>’\n\n\n1.5.3 Working with head()\nSometimes, we would like to examine complete information of a feature object. We can use head() of Base R to achieve this. The argument n allows us to indicate the number of records to display.\n\n\nShow the code\nhead(mpsz, n=5)\n\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "1.6 Plotting the Geospatial Data",
    "text": "1.6 Plotting the Geospatial Data\nIn geospatial analytics, we are definitely interested to visualise geospatial features. plot() provides a quick and simply way to visualise the data at hand.\n\n\nShow the code\nplot(mpsz)\n\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nThe default plot of sf object is a multi-plot of all attributes, up to a maximum limit (in this case, it is 9 out of 15) as shown above.\nWe can also choose to plot only the geometry by using the code chunk below.\n\n\nShow the code\nplot(st_geometry(mpsz))\n\n\n\n\n\nWe can also choose to plot the sf object by using a specific attribute.\n\n\nShow the code\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\nAs mentioned earlier, plot() is meant for plotting the geospatial object for quick look. For high cartographic quality plot with more customisation options, tmap or other packages should be used."
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "1.7 Working with Projection",
    "text": "1.7 Working with Projection\nIn order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system. Projection Transformation is the process of projecting a simple feature data frame from one coordinate system to another coordinate system.\n\n1.7.1 Assigning EPSG code to a simple feature data frame\nEPSG stands for European Petroleum Survey Group and is an organisation that maintains a public registry of geodetic parameter database with standard codes–the EPSG codes.\nOne common issue faced during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nWe can examine the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below.\n\n\nShow the code\nst_crs(mpsz)\n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough the mpsz data frame is projected in ‘svy21’, when we read till the end of the print it indicates that EPSG is 9001, which is wrong. See the last line where “ID[”EPSG”,9001]“.\nThe correct/corresponding EPSG code for ‘svy21’ should be ‘3414’. We can assign the correct EPSG code using st_set_crs() of sf package.\n\n\nShow the code\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nTo confirm the change, we can check the coordinate system or CSR again.\n\n\nShow the code\nst_crs(mpsz3414)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNote that the EPSG code is 3414. See last line where “ID[”EPSG”,3414]“.\n\n\n1.7.2 Transforming the projection of preschool from wgs84 to svy21\nIn this sub-section, we will learn how to transform original data from geographic coordinate system to projected coordinate system. We need to do this transformation because the geographic coordinate system is inappropriate if the analysis require the use of distance and/or area measurements.\nFor the preschool simple feature data frame, the output of the code chunk below tells us that it is in the wgs84 coordinate system (see “Geodetic CRS: WGS 84”).\n\n\nShow the code\nst_geometry(preschool)\n\n\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.7614 1.308683 0)\n\n\nPOINT Z (103.7536 1.315748 0)\n\n\nPOINT Z (103.7645 1.305078 0)\n\n\nPOINT Z (103.765 1.305239 0)\n\n\nPOINT Z (103.7597 1.315983 0)\n\n\nInstead of using st_set_crs() like we did in the previous section, we must use st_transform() of the sf package. This is because we need to reproject preschool from one coordinate system to another coordinate system mathematically.\n\n\nShow the code\npreschool3414 <- st_transform(preschool,\n                              crs = 3414)\n\n\n\nNote: In practice, we need to find out the appropriate project coordinate system to use before performing the projection transformation.\n\nLet’s check if the transformation is complete.\n\n\nShow the code\nst_geometry(preschool3414)\n\n\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (19997.26 32333.17 0)\n\n\nPOINT Z (19126.75 33114.35 0)\n\n\nPOINT Z (20345.12 31934.56 0)\n\n\nPOINT Z (20400.31 31952.36 0)\n\n\nPOINT Z (19810.78 33140.31 0)\n\n\nFrom the output, we can see that it is in the svy21 projected coordinate system now (see “Projected CRS: SVY21 / Singapore TM). Also, the Bounding box values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.\nAlternatively, the code chunk below will import and transform GIS data into projected coordinates system data. (Instead of importing and transforming in two separate code chunks.)\n\n\nShow the code\npreschool = st_read(\"data\\\\geospatial\\\\pre-schools-location-kml.kml\") %>%\n  st_transform(crs = 3414)\n\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\ameliachuayt\\ISSS624\\Exercises\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nWhile the results states that Geodetic CRS is WGS84, we can examine the dataframe and see that under geometry , the coordinates are no longer in wgs84 (the values are larger than 360)."
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-aspatial-data",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "1.8 Importing and Converting Aspatial Data",
    "text": "1.8 Importing and Converting Aspatial Data\nIt is common to have data such as listing of inside Airbnb. Such data are called aspatial data. They are not geospatial data, however, among the data fields, there are two fields that capture the x- and y- coordinates of the data points.\nIn this section, I learned to import aspatial data in R environment and save it as a tibbledata frame. Then, I will convert it into a simple feature data frame.\n\n1.8.1 Importing aspatial data\nlistings.csv data set is in csv format and we will use read_csv() of readr package to import the file. The output R object is called listings and is a tibble data frame.\n\n\nShow the code\nlistings <- read_csv('data\\\\aspatial\\\\listings.csv')\n\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLet’s examine if the import was completely correctly.\n\n\nShow the code\nlist(listings)\n\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\nThe output reveals that listing tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System\nNote that list() instead of glimpse() was used above. In the code chunk below, we can also print the features of the data using glimpse(). In glimpse(), the columns run down the page and data runs across, enabling us to see all the columns easily.\n\n\nShow the code\nglimpse(listings)\n\n\nRows: 4,252\nColumns: 16\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ latitude                       <dbl> 1.33432, 1.34537, 1.34754, 1.34531, 1.2…\n$ longitude                      <dbl> 103.7852, 103.9589, 103.9596, 103.9610,…\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n\n\n\n\n1.8.2 Create simple feature dataframe from aspatial dataframe\nThe code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages\n\n\nShow the code\nlistings_sf <- st_as_sf(listings,\n                        coords = c(\"longitude\",\"latitude\"), #x-coord first, then y-coord\n                        crs=4326) %>% #provide coordinates system in epsg format\n                                      #EPSG:4326 is wgs84\n                                      #EPSG:3414 is Singapore's SVY21 Projected Coordinate System\n  st_transform(crs = 3414)\n\n\nSeveral things to take note of from the arguments above:\n\ncoords argument requires us to input column name of x-coordinate first, followed by column name of y-coordinate\ncrs argument requires us to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. We can search for other country’s epsg code by referring to epsg.io.\n%>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\nLet’s examine the content of the newly created simple feature data frame. Note that there is a new column geometry that has been added. Also, the longitude and latitude columns have been dropped.\n\n\nShow the code\nglimpse(listings_sf)\n\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…"
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#geo-processing-with-sf-package",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#geo-processing-with-sf-package",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "1.9 Geo-processing with sf package",
    "text": "1.9 Geo-processing with sf package\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, I learned how to perform two commonly used geoprocessing functions:\n\nbuffering and\npoint in polygon count\n\n\n1.9.1 Buffering\nBuffering involves measuring the distance outward in all directions from an object. The output is a polygon.\nTo illustrate how buffering works, how is a hypothetical scenario:\n\n\n\n\n\n\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path.\nTask: Determine the extent of the land that needs to be acquired and their total area.\n\n\n\nSteps to solve:\nStep 1: Compute the 5-meter buffers around the cycling paths\n\n\nShow the code\nbuffer_cycling <- st_buffer(cyclingpath,\n                            dist = 5, #5 metres\n                            nQuadSegs = 30)\n\n\nStep 2: Calculate area of buffers\nAs mentioned earlier, the output of buffering is polygons. So here, we can create a new column AREA to store the values of the areas of polygons\n\n\nShow the code\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n\nStep 3: Derive Total Land Area\nTo do this, we can easily use sum() of Base R\n\n\nShow the code\nsum(buffer_cycling$AREA)\n\n\n773143.9 [m^2]\n\n\n\n\n1.9.2 Point-in-polygon Count\nWe can also count the frequency of observations within a polygon. To illustrate this, we have another hypothetical situation\n\n\n\n\n\n\nNote\n\n\n\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nTask: Find out the numbers of pre-schools in each Planning Subzone and the density per square metres.\n\n\nStep 1: Identify pre-schools located in each Subzone and Calculate number of pre-schools in each subzone\nWe can use st_interesects() to identify which subzones pre-schools are located in and lengths() to count the number of pre-schools that fall inside each subzone.\n\n\nShow the code\nmpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nCheck descriptive statistics using the below code chunk.\n\n\nShow the code\nsummary(mpsz3414$`PreSch Count`)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nWe can also list the subzone with the most pre schools using top_n() of dplyr package. We can change the argument within top_n() according to requirements e.g., Top 3, 5, or 10, etc.\n\n\nShow the code\ntop_n(mpsz3414, 1, `PreSch Count`)\n\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nStep 2: Derive area of each subzone\nThe code chunk below uses st_area() of sf package to derive the area of each subzone. We are creating a new column Area to store the area values.\n\n\nShow the code\nmpsz3414$Area <- mpsz3414 %>% \n  st_area()\n\n\nStep 3: Calculate Density\nWe can simply calculate the density by using mutate() of dplyr package. A new column PreSch Density is created.\n\n\nShow the code\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "1.10 Exploratory Data Analysis (EDA)",
    "text": "1.10 Exploratory Data Analysis (EDA)\nIn this section, I learned appropriate ggplot2 functions to create function yet truthful statistical graphs for EDA purposes.\n\n1.10.0.1 Distribution of Pre-school Density in Subzones of Singapore using Histograms\nConventionally, hist() of R Graphics can be used to plot a histogram of the distribution of pre-school density. While hist()’s syntax is easy to use, the output does not meet publication quality and it has limited room for customisation.\n\n\nShow the code\nhist(mpsz3414$`PreSch Density`) \n\n\n\n\n\nLet’s retry to ggplot2 functions instead.\n\n\nShow the code\nggplot(data=mpsz3414,\n       aes(x=as.numeric(`PreSch Density`))) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill = \"light blue\") + \n  labs(title = \"Are pre-schools evenly distributed in Singapore?\",\n       subtitle = \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Frequency\")\n\n\n\n\n\n\n\n1.10.0.2 Relationship between Pre-school Density and Pre-school Count using Scatterplot\nDIY: Conventionally, plot() of R Graphics can be used to plot a scatterplot to reveal the relationship between pre-school density and pre-school count.\n\n\nShow the code\nplot(mpsz3414$`PreSch Density`, mpsz3414$`PreSch Count`, main=\"Pre-school Count vs Pre-school Density\",\n    pch=19)\n\n\n\n\n\nHowever, we may also opt to use ggplot2 for it has better customisation capabilities.\n\n\nShow the code\nlibrary(units)\n\n\nudunits database from C:/R/R-4.2.2/library/units/share/udunits/udunits2.xml\n\n\nShow the code\nggplot(data=mpsz3414, aes(x=`PreSch Density`, y=`PreSch Count`))+\n  geom_point()+ \n  labs(x = \"Pre-school density (per km sq)\",\n       y = \"Pre-school count\")"
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#overview-of-choropleth-mapping-with-r",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#overview-of-choropleth-mapping-with-r",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "2.1 Overview of Choropleth Mapping with R",
    "text": "2.1 Overview of Choropleth Mapping with R\nIn the second of this two-part hands-on exercise, I learned how to plot functional and truthful choropleth maps by using an R package called tmap package.\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary."
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#data-acquisition-1",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#data-acquisition-1",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "2.2 Data Acquisition",
    "text": "2.2 Data Acquisition\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile."
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#getting-started-importing-data",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#getting-started-importing-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "2.3 Getting Started & Importing Data",
    "text": "2.3 Getting Started & Importing Data\n\n2.3.1 Getting Started\nThe key R package for this hands-on exercise is tmap package in R. We will also be using four other R packages:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data\n\nThree out of the four are packages (readr, tidyr and dplyr) are part of the tidyverse package. Therefore, we can just load the tidyverse package instead of all three packages.\nThe code chunk below loads sf, tmap and tidyverse packages into R environment.\n\n\nShow the code\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n2.3.2 Importing Geospatial Data into R\nWe can use st_read() of sf package to import MP14_SUBZONE_WEB_PL shapefile in R as a simple feature data frame called mpsz.\n\n\nShow the code\nmpsz <- st_read(dsn=\"data\\\\geospatial\",\n                layer='MP14_SUBZONE_WEB_PL')\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\ameliachuayt\\ISSS624\\Exercises\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nExamine the content of mpsz using the code chunk below.\n\n\nShow the code\nmpsz\n\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nInterestingly, only the first ten records will be displayed.\nOn the other hand, we can also use head() to specify the number of rows to return (must be less than 10).\n\n\nShow the code\nhead(mpsz, 3)\n\n\nSimple feature collection with 3 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30247.18\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y    MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y          OUTRAM         OT\n3        3          3    BOAT QUAY    SRSZ03      Y SINGAPORE RIVER         SR\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n3 CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n\n\n\n\n2.3.3 Import Attribute Data\nNext, I imported respopagsex2000to2018.csv file into RStudio and saved the file into an R dataframe called popagsex using read_csv() function of readr package as shown in the code chunk below.\n\n\nShow the code\npopdata <- read_csv('data\\\\aspatial\\\\respopagesextod2011to2020.csv')\n\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n2.3.4 Data Preparation\nI am interested to visualise population demographics in the Year 2020. Before a thematic map can be prepared, I need to prepare a data table with Year 2020 values. The following variables will be required for this tasks: PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nPA: Planning Area\nSZ: Planning Subzone\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group.\n\nAs we can see, we will need to wrangle the data set and derive new columns like YOUNG and AGED.\n\n2.3.4.1 Data Wrangling\nThe following data wrangling and transformation functions were used:\n\npivot_wider() of tidyr package, and\n\nthis was used to pivot row values like age to columns. It “widens” data, increasing the number of columns and decreasing the number of rows.\n\nmutate(), filter(), group_by() and select() of dplyr package\n\n\n\nShow the code\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n2.3.4.2 Joining attribute data and geospatial data\nWe need to convert the PA and SZ values to uppercase.\n\n\nShow the code\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\n\nShow the code\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nWrite the resulting file into a .rds file.\n\n\nShow the code\nwrite_rds(mpsz_pop2020, \"data\\\\rds\\\\mpszpop2020_amelia.rds\")"
  },
  {
    "objectID": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#choropleth-mapping-geospatial-data-using-tmap-package",
    "href": "Exercises/Hands-on_Ex1/Hands-on_Ex1.html#choropleth-mapping-geospatial-data-using-tmap-package",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling and Choropleth Mapping with R",
    "section": "2.4 Choropleth Mapping Geospatial Data Using tmap package",
    "text": "2.4 Choropleth Mapping Geospatial Data Using tmap package\nThere are two approaches to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n2.4.1 Plotting choropleth quickly using qtm()\nqtm() of tmap package provides a quick and concise visualisation.\n\n\nShow the code\ntmap_mode('plot')\n\n\ntmap mode set to plotting\n\n\nShow the code\nqtm(mpsz_pop2020,\n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n2.4.2 Creating choropleth map using tmap’s elements\nWhile qtm() can be used to get quick visualisation, the downside is that aesthetics of individual layers are harder to control. To get a high quality cartographic choropleth map, I will use tmap’s drawing elements.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nThe steps to creating the above map will be detailed in this sub-section.\n\n2.4.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons():\n\ntm_shape() defines the input data\ntm_polygons() draws the planning subzone polygons\n\n\n\nShow the code\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n2.4.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we assign the target variable such as Dependency to tm_polygons().\nBy default, missing values will be shaded in grey.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n2.4.2.3 Drawing a choropleth map using tm_fill() and tm_border()\n\ntm_fill(): shades the polygons using the default colour scheme\ntm_border(): Add borders to the polygons. The arguments are as follows:\n\nalpha specifies the transparency or opaqueness of the borders. By default, the alpha value of the col is used (normally 1 i.e. not transparent). There\ncol specifies the border colour,\nlwd specifies the border line width. The default is 1, and\nlty specifies the border line type. The default is “solid”.\n\n\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")+\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\n2.4.3 Data classification methods of tmap\nChoropleth maps employ some methods of data classification so to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n2.4.3.1 Plotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes (n = 5). This method classifies data into a certain number of categories with an equal number of units in each category.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nIn the code chunk below, equal data classification method is used. This method sets the value ranges in each category equal in size.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nDIY: We can see that the distribution of quantile data classification method are more evenly distributed than equal data classification method.\nLet’s us examine other types of classification methods:\n\nTop Left: pretty (default),\nTop Right: equal,\nBottom Left: jenks and\nBottom Right: kmeans.\n\n\n\nShow the code\ntm_shape(mpsz_pop2020)+ \n  tm_fill(c(\"DEPENDENCY\",\"DEPENDENCY\",\"DEPENDENCY\",\"DEPENDENCY\"),,\n              style = c(\"pretty\", \"equal\",\"jenks\",\"kmeans\"), \n              palette = list(\"Blues\",\"Oranges\",\"Reds\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))+\n  tm_borders(alpha = 0.2)\n\n\n\n\n\nWe can observe that pretty and equal gives similar distributions and not as even as the other two. Comparing jenks and kmeans classification methods, we can see that kmeans is more evenly distributed.\nDIY: The below code chunk uses the quantile classification method with different numbers of classes: 2 (top left), 6 (top right), 10 (bottom left), 20 (bottom right).\n\n\nShow the code\ntm_shape(mpsz_pop2020)+ \n  tm_fill(c(\"DEPENDENCY\",\"DEPENDENCY\",\"DEPENDENCY\",\"DEPENDENCY\"),\n              n = c(2,6,10,20),\n              style = c(\"quantile\", \"quantile\",\"quantile\",\"quantile\"), \n              palette = list(\"Blues\",\"Oranges\",\"Reds\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))+\n  tm_borders(alpha = 0.2)\n\n\n\n\n\nUnsurprisingly, we can see that as the number of classes increases, the more distributed the data is. Although the differences between the chart diminishes as the number of classes increase–for e.g., classes 10 and 20 are quite similar.\n\n\n2.4.3.2 \n2.4.3.2 Plotting choropleth map with custom break\nWe can set breakpoints using the breaks argument in tm_fill(). For tmap, breaks include a minimum and maximum. Therefore, to have n categories, n+1 elements must be specified in ascending order.\nFirst, some descriptive stats\n\n\nShow the code\nsummary(mpsz_pop2020$DEPENDENCY)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nWith reference to the above, we set break points at 0.00 (min), 0.60, 0.70, 0.80, 0.90, 1.00 (max).\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0.00, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n2.4.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package\n\n2.4.4.1 Using ColorBrewer Palette\nTo change the colour palette, we assign the preferred colour to palette argument of tm_fill() as shown below.\n\n\nShow the code\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 6, \n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nWe can reverse the colour shades by adding ‘-’ in the palette argument.\n\n\nShow the code\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n2.4.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohesive map. Map elements includes: objects to be mapped,title, scale bar, compass, margins and aspects ratios.\n\n2.4.5.1 Map Legend\nIn tmap, legend options allow us to change appearance, position and format of the legend.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n2.4.5.2 Map Style\nIn tmap, we can change a wide variety of layout settings using tmap_style(). The classic style is used here. Other available styles are: “white”, “gray”, “natural”, “cobalt”, “col_blind”, “albatross”, “beaver”, “bw”, “watercolor”\n\n\nShow the code\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\", \n          palette = \"-Greens\") + \n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n2.4.5.3 Cartographic Furniture\ntmap also provides arguments to draw other map furniture like compass, scale bar and grid lines.\n\n\nShow the code\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") + \n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2, \n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) + \n  tm_compass(type=\"8star\", size = 2) + \n  tm_scale_bar(width = 0.15) + \n  tm_grid(lwd = 0.1, alpha = 0.2) + \n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nTo reset to the default style, use the below code chunk.\n\n\nShow the code\ntmap_style(\"white\")\n\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n2.4.6 Drawing Small Multiple Choropleth Maps of Facet Maps\nSmall multiple maps or facet maps are composed of many maps arranged side-by-side or stacked vertically. Using facet maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n2.4.6.1 By assigning multiple values to at least one of the aesthetic arguments\nI created facet maps by defining col in tm_fill().\n\n\nShow the code\ntm_shape(mpsz_pop2020) + \n  tm_fill(col = c(\"YOUNG\",\"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") + \n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) + \n  tmap_style(\"white\")\n\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nWe can also assign multiple values to aesthetic arguments like style and palette.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n              style = c(\"equal\", \"quantile\"), \n              palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n2.4.6.2 By defining a group-by variable in tm_facets()\nWe can create facet maps using tm_facets().\n\n\nShow the code\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by = \"REGION_N\",\n            free.coords = TRUE,\n            drop.units  = TRUE) + #instead of drop.shapes as it is deprecated\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"),\n            title.size = 20) + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n2.4.6.3 By creating multiple stand-alone maps with tmap_arrange()\nWe can create facet maps by creating multiple stand-alone maps and arranging them. In tmap_arrange(), arguments ncol specifies the number of columns to have and asp refers to the aspect ratio of each map.\n\n\nShow the code\n#Create stand-alone maps\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\n#Arrange Maps\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2) \n\n\n\n\n\nIf there are more than 2 maps, I can just add on for instance:\n\n\nShow the code\ntmap_arrange(youngmap, agedmap, youngmap, agedmap, asp=1.7, ncol=2)\n\n\n\n\n\n\n\n\n2.4.7 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\n\nShow the code\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, I learned how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, I was able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "href": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 The analytical question\nIn spatial policy, one of the main development objectives of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically.\nIf the answer is No. Then, our next question would be “is there sign of spatial clustering?”. And, if the answer for this question is Yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita or GDPPC) of Hunan Province, People Republic of China.\n\n\n2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n2.3 Setting the Analytical Tools\nThe code chunk below installs and loads sf, spdep, tmap and tidyverse packages into R environment. pacman() is a R package management tool. It provides intuitively named functions for the base functions.\n\n\nShow the code\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#importing-data-into-r-environment",
    "href": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#importing-data-into-r-environment",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "3 Importing Data into R Environment",
    "text": "3 Importing Data into R Environment\nThe geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n3.1 Import shapefile into R\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features object of sf.\n\n\nShow the code\nhunan <- st_read(dsn = 'data\\\\geospatial',\n                 layer = 'Hunan')\n\n\nReading layer `Hunan' from data source \n  `C:\\ameliachuayt\\ISSS624\\Exercises\\Hands-on_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nFrom the output, we can see that there are 88 multipolygons and 7 fields.\n\n\n3.2 Import csv file into R\n\n\nShow the code\nhunan2012 <- read_csv(\"data\\\\aspatial\\\\Hunan_2012.csv\", show_col_types = FALSE)\n\n\n\n\n3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\n\nShow the code\nhunan <- left_join(hunan, hunan2012)\n\n\nJoining, by = \"County\"\n\n\n\n\n3.4 Visualising Regional Development Indicator\nThe code chunk below is used to prepare two stand-alone choropleth maps to visualise the distribution of GDPPC 2012 by using gtm() of tmap package. The map on the left will be classified using equal intervals and the one on the right will be classified using quantiles.\nThen by using tmap_arrange() of tmap package, we will create a facet map.\nNote that:\n\nGDPPC refers to Gross Domestic Product per capita.\nqtm() allows us to plot thematic maps quickly.\n\n\n\nShow the code\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\", \n          n = 5, \n          style = 'equal') + \n  tm_borders(alpha = 0.5) + \n  tm_layout(main.title = 'Equal Interval Classification')\n\nquantile <- tm_shape(hunan) + \n  tm_fill(\"GDPPC\", \n          n = 5, \n          style = 'quantile') + \n  tm_borders(alpha = 0.5) + \n  tm_layout(main.title = \"Equal Quantile Classification\")\n\ntmap_arrange(equal, quantile, asp = 1, ncol = 2)\n\n\n\n\n\nBased on the equal interval map, we can see that there is uneven distribution of GDPPC. However, the distribution is not that obvious when we use the quantile map. This example aims to alert us that depending on the method of representation e.g. equal or quantile, we may get different interpretations of the situation."
  },
  {
    "objectID": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "href": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "4 Global Spatial Autocorrelation",
    "text": "4 Global Spatial Autocorrelation\nIn this section, I learned how to compute global spatial autocorrelation statistics and how to perform spatial complete randomness test for global spatial autocorrelation.\n\n4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. By default, Queen contiguity is applied.\n\n\nShow the code\nwm_q <- poly2nb(hunan, \n                queen = TRUE)\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two least connected area with only one neighbour.\n\n\n4.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighbouring county then summing the weighted income values.\nWhile this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\nNote that other more robust options are available, notably style=“B”.\n\n\nShow the code\nrswm_q <- nb2listw(wm_q,\n                   style = \"W\",\n                   zero.policy = TRUE)\nrswm_q\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n4.3 Global Spatial Autocorrelation: Moran’s I\nIn this section, I learned how to perform Moran’s I statistical testing by using moran.test() of spdep.\nmoran.test(x, listw, randomisation=TRUE, zero.policy=NULL,\n alternative=\"greater\", rank = FALSE, na.action=na.fail, spChk=NULL,\n adjust.n=TRUE, drop.EI2=FALSE)\nMoran’s I describe how features differ from the values in the study area as a whole. If the Moran I (Z-value is):\n\npositive (I>0): Clustered, observations tend to be similar\nnegative (I<0): Disperse, observations tend to be dissimilar\napproximately zero: observations arranged randomly over space\n\nWe will test the following hypothesis:\n\nH0: Observed spatial patterns of values is equally likely as any other spatial pattern i.e. data is randomly disbursed, no spatial pattern\nH1: Data is more spatially clustered than expected by chance alone.\n\n\n\nShow the code\nmoran.test(hunan$GDPPC,\n           listw = rswm_q,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nSince the p-value < 0.05, we have sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This means that data is more spatially clustered than expected by chance alone. Since Moran I statistic > 0.300, the observation are clustered, observations tend to be similar.\n\n4.3.1 Computing Monte Carlo Moran’s I\nIf we have doubts that the assumptions of Moran’s I are true (normality and randomisation), we can use a Monte Carlo simulation to perform a permutation test for Moran’s I.\nThe permutation tests consists of randomly reassigning the attribute values to a cell under the assumption of no spatial pattern. This random assignment is conducted n times. Each time, we will compute the Moran’s I to creating an empirical distribution of Moran’s I under H0.\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\nmoran.mc(x, listw, nsim, zero.policy=NULL, alternative=\"greater\",\n na.action=na.fail, spChk=NULL, return_boot=FALSE, adjust.n=TRUE)\nWe will test the following hypothesis using a one-tailed test:\n\nH0: Observed spatial patterns of values is equally likely as any other spatial pattern i.e. data is randomly disbursed, no spatial pattern\nH1: Data is more spatially clustered than expected by chance alone.\n\n\n\nShow the code\nset.seed(1234)\nbperm = moran.mc(hunan$GDPPC, \n         listw = rswm_q,\n         nsim = 999,\n         zero.policy = TRUE,\n         na.action = na.omit)\nbperm\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nSince the pseudo p-value < 0.05, we have sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This means that data is more spatially clustered than expected by chance alone.\n\n\n4.3.2 Visualising Monte Carlo Moran’s I\nWe can examine the simulated Moran’s I test statistics in greater detail through descriptive statistics and plotting the distribution of the statistical values as a histogram by using the code chunks below.\nThe mean gives the average of Moran’s I for all simulated distributions.\n\n\nShow the code\nmean(bperm$res[1:999])\n\n\n[1] -0.01504572\n\n\nThe variance of Moran’s I for all simulated distributions can be computed using this code chunk.\n\n\nShow the code\nvar(bperm$res[1:999])\n\n\n[1] 0.004371574\n\n\n\n\nShow the code\nsummary(bperm$res[1:999])\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\n\nShow the code\nhist(bperm$res,\n     freq = TRUE,\n     breaks = 20,\n     xlab = \"Simulated Moran's I\")\nabline(v=0, \n       col = 'red')\nabline(v=0.30075, #actual moran's I\n       col = 'blue')\n\n\n\n\n\nFrom the output above, we can see that the distribution of the simulated values of Moran’s I is slightly skewed to the right. The blue line above indicates the actual value of Moran’s I, which is near the extremes of the distribution. This suggests that there is evidence of positive autocorrelation i.e. cluster. (Reference)\nWe can also plot the above graph using ggplot2 package. To do so, we must first convert the results into a dataframe.\n\n\nShow the code\ndf <- as.data.frame(bperm$res)\ncolnames(df) <- c(\"Simulated Moran's I\")\n\n\n\n\nShow the code\nggplot(df, aes(x=`Simulated Moran's I`)) + \n  geom_histogram(color = \"darkblue\", fill = \"lightblue\", bins = 20) +\n  ylab('Frequency')\n\n\n\n\n\n\n\n\n4.4 Global Spatial Autocorrelation: Geary’s C\nIn this section, I learned how to perform Geary’s C statistics testing by using appropriate functions of spdep package.\n\n4.4.1 Geary’s C Test\nGeary’s C describe how features differ from their immediate neighbours. If the Geary’s C (Z-value is):\n\nLarge (c>1): Dispersed, observations tend to be dissimilar\nSmall (c<1): Clustered, observations tend to be similar\nc = 1: observations arranged randomly over space\n\nWe will test the following hypothesis:\n\nH0: Observed spatial patterns of values is equally likely as any other spatial pattern i.e. data is randomly disbursed, no spatial pattern\nH1: Data is more spatially clustered than expected by chance alone\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\ngeary.test(x, listw, randomisation=TRUE, zero.policy=NULL,\n    alternative=\"greater\", spChk=NULL, adjust.n=TRUE)\n\n\nShow the code\ngeary.test(hunan$GDPPC, listw = rswm_q)\n\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nSince the p-value = 0.0001526 < 0.05, we have sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This means that data is more spatially clustered than expected by chance alone.\n\n\n4.4.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\n\nShow the code\nset.seed(1234)\nbperm = geary.mc(hunan$GDPPC,\n                 listw = rswm_q,\n                 nsim = 999)\nbperm\n\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nSince the pseudo p-value = 0.001 < 0.05, we have sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This means that data is more spatially clustered than expected by chance alone.\n\n\n4.4.3 Visualising the Monte Carlo Geary’s C\nWe can examine the simulated Geary’s C test statistics in greater detail through descriptive statistics and plotting the distribution of the statistical values as a histogram by using the code chunks below.\nThe mean gives the average of Geary’s C for all simulated distributions.\n\n\nShow the code\nmean(bperm$res[1:999])\n\n\n[1] 1.004402\n\n\nThe variance of Geary’s C for all simulated distributions can be computed using this code chunk.\n\n\nShow the code\nvar(bperm$res[1:999])\n\n\n[1] 0.007436493\n\n\n\n\nShow the code\nsummary(bperm$res[1:999])\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\n\nShow the code\nhist(bperm$res,\n     freq = TRUE,\n     breaks = 20,\n     xlab = \"Simulated Geary's C\")\nabline(v=1, \n       col = 'red')\n\n\n\n\n\nFrom the output above, we can see that the distribution of the simulated values of Moran’s I fairly normally distributed."
  },
  {
    "objectID": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "href": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "5 Spatial Correlogram",
    "text": "5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\nIn spatial correlograms, the number of bins determines the distance range of each bin. The range is the maximum distance divided by the number of bins.\n\n5.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\nsp.correlogram(neighbours, var, order = 1, method = \"corr\",\n style = \"W\", randomisation = TRUE, zero.policy = NULL, spChk=NULL)\n# S3 method for spcor\nplot(x, main, ylab, ylim, ...)\n# S3 method for spcor\nprint(x, p.adj.method=\"none\", ...)\n\n\nShow the code\nMI_corr <- sp.correlogram(wm_q, #note that we used the original weights matrix\n                          hunan$GDPPC,\n                          order = 6,\n                          method = 'I',\n                          style = 'W')\nplot(MI_corr)\n\n\n\n\n\nNext, let’s examine the full analysis report and view which values are statistically significant.\n\n\nShow the code\nprint(MI_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nFrom the output, we see that with the exception of Lag 4, the rest of the results are statistically significant at the 95% level of confidence.\nThe correlogram depicts how the spatial autocorrelation changes with distance. From the chart, we can see that Moran’s I decreases when spatial lag increases. The first three lags ranges are statistically significant with a positive Moran’s I score while the last two (5 & 6) are statistically significant with a negative Moran’s I score. This tells us that there is quite a strong spatial autocorrelation for the first three distance classes. As distance increases beyond lag-4, there is negative autocorrelation.\n\n\n5.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\n\nShow the code\nGC_corr <- sp.correlogram(wm_q,\n                          hunan$GDPPC,\n                          order = 6, \n                          method = \"C\",\n                          style = \"W\")\nplot(GC_corr)\n\n\n\n\n\nNext, let’s examine the full analysis report and view which values are statistically significant.\n\n\nShow the code\nprint(GC_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nFrom the output, we see that with the exception of Lag 3, 4 and 6, the rest of the results are statistically significant at the 95% level of confidence.\nThe correlogram depicts how the spatial autocorrelation changes with distance. From the chart, we can see that Geary’s C increases when spatial lag increases. This is unsurprising, given that Moran’s I and Geary’s C are inversely related.\nThe first two lags are statistically significant and below 1 while the last lag is statistically significant and above 1. This tells us that there is quite a strong spatial autocorrelation for the first two distance classes."
  },
  {
    "objectID": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "href": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "6 Cluster and Outlier Analysis",
    "text": "6 Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city, local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, I learned how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’s I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\n6.1 Computing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\n\nShow the code\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviation of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\n\nShow the code\nfips <- order(hunan$County) #order in alphabetical order, returns index of the variable\nprintCoefmat(data.frame(localMI[fips,],\n                        row.names=hunan$County[fips]), check.names=FALSE)\n\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n6.1.1 Mapping the local Moran’s I\nBefore mapping the local Moran’s I map, I would append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task.\n\n\nShow the code\nhunan.localMI <- cbind(hunan, localMI) %>%\nrename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\n6.1.2 Mapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\n\nShow the code\nlocalMI.map <- tm_shape(hunan.localMI) + \n                  tm_fill(col = \"Ii\",\n                          style = 'pretty',\n                          title = \"Local Moran Statistics\") + \n                  tm_borders(alpha = 0.5)\nlocalMI.map\n\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n6.1.3 Mapping local Moran’s I p-values\nThe choropleth above shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\n\nShow the code\npvalue.map <- tm_shape(hunan.localMI) + \n                tm_fill(col = \"Pr.Ii\",\n                       breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n                       palette = \"-Blues\",\n                       title = \"Local Moran's I p-values\") + \n                tm_borders(alpha = 0.5)\n\npvalue.map\n\n\n\n\n\nWe can see that only the darker blue areas are within the 0.05 significance level. This means that not all the local Moran’s I values are statistically significant at the 95% confidence level.\n\n\n6.1.4 Mapping both local Moran’s I values and p-values\nWe can plot both the local Moran’s I values map and its corresponding p-values map next to each other using tmap_arrange() from tmap package.\n\n\nShow the code\ntmap_arrange(localMI.map, pvalue.map, asp = 1, ncol = 2)\n\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nA positive Local Moran I Statistic corresponds to that area being part of a cluster–that means that its neighbours have similary high or low attribute values. A negative value for Local Moran I Statistic indicates that the area has neighboring features with dissimilar values, which means that this area is an outlier.\nWe should only look at counties where the p-value is significant at the 95% confidence level. And when we do, we can see that the Local Moran I Statistic of the darker green areas (on the left) are significant at the 95% confidence level. This means that it is part of a cluster. Its surrounding areas’ I statistic values are positive and statistically significant which indicates that they are also a cluster."
  },
  {
    "objectID": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "href": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "7 Creating a LISA Cluster Map",
    "text": "7 Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations colour coded by type of spatial autocorrelation. Before we generate the LISA Cluster Map, we must plot the Moran scatterplot.\n\n7.1 Plotting Moran scatterplot\nThe Moran scatterplot illustrates the relationship between the values of the chosen attribute e.g., GDPPC at each location and the average value of the same attribute at neighbouring locations.\nWe can plot the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\n\nShow the code\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels = as.character(hunan$County),\n                  xlab = \"GDPPC 2012\",\n                  ylab = \"Spatially Lag GDPPC 2012\")\n\n\n\n\n\nThe Moran scatterplot is split into 4 quadrants:\n\nTop right corner (High-High): Autocorrelation Positive Cluster that belongs to counties with high GDPPC and are surrounded by other areas that have the higher than average level of GDPPC.\nTop left corner (Low-High): Autocorrelation Negative Cluster that belongs to counties with low GDPPC among high GDPPC neighboours\nBottom right corner (High-Low): Autocorrelation Negative Cluster that belongs to counties with high GDPPC among low GDPPC neighbours.\nBottom left corner (Low-Low): Autocorrelation Positive Cluster that belongs to counties with have low GDPPC among low GDPPC neighbours.\n\n\n\n7.2 Plotting Moran scatterplot with standardised variable\nWe can use scale() to center and scale the variable. Centering is done by subtracting the mean (omitting NAs) from the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\nThe above describes the Z-standardisation.\nThe below code chunk will create a new column Z.GDPPC in the hunan dataframe to store the standardised GDPPC values. The as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\n\n\nShow the code\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>%\n  as.vector\nhead(hunan,3)\n\n\nSimple feature collection with 3 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 111.7027 ymin: 28.61762 xmax: 112.3013 ymax: 29.77344\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n  avg_wage deposite  FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2 3541  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0 8665  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7 4777  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757\n                        geometry     Z.GDPPC\n1 POLYGON ((112.0625 29.75523... -0.04920595\n2 POLYGON ((112.2288 29.11684... -0.22834116\n3 POLYGON ((111.8927 29.6013,...  0.67940617\n\n\nIn the output above, we can see the new column added.\nWe can now plot the Moran scatterplot using the Z.GDPPC, the standardised GDPPC values.\n\n\nShow the code\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels = as.character(hunan$County),\n                   xlab = \"Z-GDPPC 2012\",\n                   ylab = \"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\nIn the output above, we notice that the x-axis ranged has been scaled down as compared to the previous section.\n\n\n7.3 Preparing LISA map classes\nWe can prepare a LISA cluster map by following the steps:\n\nCreate a vector that is as long as the number of counties in Hunan.\n\n\n\nShow the code\n#create a vector \nquadrant <- vector(mode = \"numeric\", length = nrow(localMI))\n\n\n\nNext we will derive a variable DV, by using the spatially lagged version (lag_GDPPC) of the variable of interested (GDPPC) and center it around its means.\n\n\n\nShow the code\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)\n\n\nIf DV > 0, it means that the spatially lagged GDPPC of the target county is higher than the mean.\n\nDerive a variable, L_MI using the Local Moran’s I.\n\n\n\nShow the code\nLM_I <- localMI[,1]\n\n\n\nSet statistical significance level for the Local Moran.\n\n\n\nShow the code\nsignif <- 0.05\n\n\n\nDefine the command lines for: high-high, low-low, low-high, high-low categories.\n\n\n\nShow the code\nquadrant[DV <0 & LM_I>0] <- 1 #low-low\nquadrant[DV >0 & LM_I<0] <- 2 #high-low\nquadrant[DV <0 & LM_I<0] <- 3 #low-high\nquadrant[DV >0 & LM_I>0] <- 4 #high-high     \n\n\n\nLastly, place non-significant Moran in the category 0.\n\n\n\nShow the code\nquadrant[localMI[,5]>signif] <- 0\n\n\nAlternatively, we can combine all the above steps into a single code chunk.\n\n\nShow the code\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I <- localMI[,1]   \nsignif <- 0.05       \nquadrant[DV <0 & LM_I>0] <- 1 #low-low\nquadrant[DV >0 & LM_I<0] <- 2 #high-low\nquadrant[DV <0 & LM_I<0] <- 3 #low-high\nquadrant[DV >0 & LM_I>0] <- 4 #high-high       \nquadrant[localMI[,5]>signif] <- 0\n\n\n\n\n7.4 Plotting LISA Map\nLet’s build the LISA map using the following code chunk.\n\n\nShow the code\n#Assign each county to its respective quardrant\nhunan.localMI$quadrant <- quadrant\n#Set the colours--one for each quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\") \n\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) + \n  tm_fill(col = \"quadrant\",\n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1],\n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) + \n  tm_borders(alpha = 0.5)\n\nLISAmap          \n\n\n\n\n\nWe can plot both the local Moran’s I map and LISA Map together.\n\n\nShow the code\ntmap_arrange(localMI.map, LISAmap, asp = 1, ncol = 2 )\n\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nWe can also visualise the GDPPC and LISAmap together.\n\n\nShow the code\ngdppc <- qtm(hunan, fill = \"GDPPC\")\ntmap_arrange(gdppc, LISAmap, asp = 1, ncol = 2)\n\n\n\n\n\nThe light blue regions are outliers, where they have lower GDPPC as compared to their neighbours. On the other hand, the regions that are dark blue and red are considered clusters. This mean that the target region and its neighbours have similar GDPPC.\nWe can also plot the local Moran’s I map and p-values map for the ease of comparison. The analysis for these two maps has been covered in the earlier section.\n\n\nShow the code\n(tmap_arrange(localMI.map, pvalue.map, asp = 1, ncol = 2))\n\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "8 Hot Spot and Cold Spot Area Analysis",
    "text": "8 Hot Spot and Cold Spot Area Analysis\nBeside detecting clusters and outliers, localised spatial statistics can also be used to detect hot spot and/or cold spot areas. Hot spot refers to areas that have higher values relative to its surroundings.\n\n8.1 Getis and Ord’s G-Statistics\nThe Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995) are alternative spatial statistics to detect spatial anomalies.\nIt looks at neighbours within a defined proximity to identify where either high or low values cluster spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n8.2 Deriving distance-based weight matrix\nGetis-Ord defines neighbours based on distance. This means we cannot use the previously derived Queen weight matrix and will need to derive a new set of weight matrix using distance as the measure.\nThere are two types of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n8.2.1 Deriving Polygon Centroids\nWe need to associate each polygon with a point before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: hunan. I need the coordinates in a separate data frame for this to work. To do this I will use a mapping function.\nThe mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of hunan. Our function will be st_centroid(). We will be using map_dbl() variation of map from the purrr package. purrr is loaded when we load tidyverse.\nTo get our longitude values we map the st_centroid() function over the geometry column of hunan and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n\nShow the code\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\n\nShow the code\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\nNow that we have latitude and longitude, I used cbind to put longitude and latitude into the same object. We should check the first few observations to see if things are formatted correctly.\n\n\nShow the code\ncoords <- cbind(longitude, latitude)\nhead(coords, 5)\n\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n\n\n\n\n8.2.2 Determine the cut-off distance\nWe need to determine the cut-off distance, within which, two areas are considered neighbours. To ensure that each region has at least one neighbour, we can set the upper limit of the distance band to the maximum first nearest neighbour distance. To do so, we can follow these steps:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nknearneigh(x, k=1, longlat = NULL, use_kd_tree=TRUE)\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n\nShow the code\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe output tells us that the largest first nearest neighbour distance is 61.79km. Using this as the upper limit will ensure that all regions have at least one neighbour.\n\n\n8.2.3 Computing fixed distance-based weight matrix\nNow, we can compute the distance-based weight matrix with a distance boundary of 0 to 62km.\n\n\nShow the code\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nFrom the output, we see that the average number of links is 3.68. This means that on average, the number of links each polygons has 3.68.\nNext, we will use nb2listw() to convert the nb object into a spatial weights object.\n\n\nShow the code\nwm62_lw <- nb2listw(wm_d62, style =\"B\")\nsummary(wm62_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\n8.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nTo control the numbers of neighbours directly, we can use k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\nAs a rule of thumb, we will set k = 8 so that the GDPPC is evaluated within the context of at least 8 neighbours.\n\n\nShow the code\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nSince we set k=8, the average number of links is also 8 since each county has 8 neighbours.\nAgain, we will convert the nb object into a spatial weights object.\n\n\nShow the code\nknn_lw <- nb2listw(knn, style = \"B\")\nsummary(knn_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "href": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "9 Computing Gi Statistics",
    "text": "9 Computing Gi Statistics\n\n9.1 Gi Statistics using fixed distance\nTo compute the Gi statistics, we can use localG() from spdep package.\nThe Gi statistic value returned is a Z-value. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\n\n\nShow the code\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nNext, we will join the Gi values to their corresponding hunan sf dataframe.\n\n\nShow the code\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\n9.1.1 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix\n\n\nShow the code\ngdppc <- qtm(hunan, 'GDPPC')\n\nGimap <- tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\",\n          style = \"pretty\",\n          palette = '-RdBu', \n          title = 'local Gi') + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp = 1, ncol = 2)\n\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nAs mentioned earlier, greater Gi values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters. As we can see there is an area on the top left of the Gimap with high values of Gi. This area could be a hot-spots–areas of high values where other areas within a neighbourhood range also share high values.\n\n\n\n9.2 Gi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knn_lw).\n\n\nShow the code\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n9.2.1 Mapping Gi values with adaptive distance weights\nTo visualise the locations of hot spot and cold spot areas, we can use the choropleth mapping functions of tmap package.\n\n\nShow the code\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\",\n          style = \"pretty\",\n          palette = \"-RdBu\",\n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp = 1, ncol = 2)\n\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nSince the definition of neighbours changed, we can observe differences in identified cold/hot spots between the above chart and the one from the previous section."
  },
  {
    "objectID": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#conclusion",
    "href": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#conclusion",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "10 Conclusion",
    "text": "10 Conclusion\nOur analysis has shown that there is definitely some form of spatial autocorrelation in the GDPPC in Hunan, PRC. The analysis we have just completed is crucial for business owners and regulatory bodies who wish to further develop in Hunan,"
  },
  {
    "objectID": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#references",
    "href": "Exercises/Hands-on_Ex2/Hands-on_Ex2.html#references",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "11 References",
    "text": "11 References\nStephanie Glen. “Moran’s I: Definition, Examples” From StatisticsHowTo.com: Elementary Statistics for the rest of us! https://www.statisticshowto.com/morans-i/\nTin Seong Kam. “4 Global and Local Measures of Spatial Autocorrelation” From R for Geospatial Data Science and Analytics https://r4gdsa.netlify.app/chap04.html"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this hands-on exercise, I learned how to delineate homogeneous region by using geographically reference multivariate data. There are two major analysis, namely:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis.\n\n\n\nBy the end of this hands-on exercise, I will be able:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform cluster analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package."
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#the-analytical-question",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#the-analytical-question",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "2.1 The analytical question",
    "text": "2.1 The analytical question\nIn geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data.\nIn this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home.\n\n\n\nMyanmar States. [Source](https://www.researchgate.net/figure/Map-of-Myanmars-States-and-Regions_fig1_344329923/actions#reference)"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#the-data",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#the-data",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "2.2 The Data",
    "text": "2.2 The Data\nTwo data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets can be retrieved from Myanmar Information Management Unit (MIMU)"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#installing-and-loading-r-packages",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#installing-and-loading-r-packages",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "2.3 Installing and loading R packages",
    "text": "2.3 Installing and loading R packages\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, which includes readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\n\nShow the code\npacman::p_load(rgdal, spdep, tmap, sf, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse)"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#importing-geospatial-data-into-r-environment",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#importing-geospatial-data-into-r-environment",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "3.1 Importing geospatial data into R environment",
    "text": "3.1 Importing geospatial data into R environment\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\n\n\nShow the code\nshan_sf <- st_read(dsn = 'data\\\\geospatial',\n                   layer = 'myanmar_township_boundaries') %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\ameliachuayt\\ISSS624\\Exercises\\Hands-on_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. Note that it is in the WGS 84 geographic coordinates system. The Bounding box also informs us that the data is in the decimal degrees, which is consistent with the WGS 84 geographic coordinates system.\nWe can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\n\nShow the code\nshan_sf\n\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\nWe can see that there are 55 rows and 15 columns.\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework. Since shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\n\nShow the code\nglimpse(shan_sf)\n\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#importing-aspatial-data-into-r-environment",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#importing-aspatial-data-into-r-environment",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "3.2 Importing aspatial data into R environment",
    "text": "3.2 Importing aspatial data into R environment\nThe csv file will be import using read_csv function of readr package. The code chunks used are shown below:\n\n\nShow the code\nict <- read_csv(\"data\\\\aspatial\\\\Shan-ICT.csv\")\n\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s tibble data.frame format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\n\nShow the code\nsummary(ict)\n\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame."
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#derive-new-variables-using-dplyr-package",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#derive-new-variables-using-dplyr-package",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "3.3 Derive new variables using dplyr package",
    "text": "3.3 Derive new variables using dplyr package\nThe unit of measurement of the values are number of households. Generally, townships with relatively higher number of households will also have a higher number of households that owns radios, TVs, etc. Therefore, there is an inherent bias if w were to use the ict value directly.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\n\nShow the code\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nNote that we multiply the variables by 1,000 as we want the results to be number of households using the particular InfoComm technology per thousand households.\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\n\nShow the code\nsummary(ict_derived)\n\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#eda-using-statistical-graphics",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#eda-using-statistical-graphics",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "4.1 EDA using Statistical Graphics",
    "text": "4.1 EDA using Statistical Graphics\nWe can plot the distribution of the variable i.e., number of households with radio by using appropriate EDA methods shown in the code chunk below.\nHistograms are useful in identifying the over distribution of data values i.e., left skewed, right skewed or normal distribution\n\n\nShow the code\nggplot(data = ict_derived, \n       aes(x = `RADIO`)) + \n  geom_histogram(bins = 20,\n                 color = \"black\", \n                 fill = \"lightblue\")\n\n\n\n\n\nWe can use boxplots to detect outliers. As a rule of thumb outliers are data points that exceed 1.5IQR (InterQuartile Range). Decision to remove or retain outliers depend on the study.\n\n\nShow the code\nggplot(data = ict_derived, \n       aes(x = `RADIO`)) + \n  geom_boxplot(color = \"black\", \n               fill = \"light blue\")\n\n\n\n\n\nFrom the box plot, we can see that there are 3 outliers with extremely high penetration rate.\nNext, we can plot the distributions of newly derived variables i.e., Radio penetration rate by using the code chunk below.\n\n\nShow the code\nggplot(data = ict_derived, \n       aes(x = `RADIO_PR`)) + \n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\")\n\n\n\n\n\nFrom the histogram, we see that the distribution of radio penetration rate is right-skewed. The suggests that the average penetration rate is greater than the median.\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\n\nShow the code\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\nShow the code\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\nFrom the distributions, we can observe the following:\n\nTV_PR: Left-skewed. The range of the x-axis is relatively larger.\nLLPHONE_PR: Right-skewed. The range of the x-axis is relatively smaller.\nMPHONE_PR: Slightly left-skewed The range of the x-axis is relatively larger.\nCOMPUTER_PR: Right-skewed. The range of the x-axis is relatively smaller.\nINTERNET_PR: Right-skewed. The range of the x-axis is relatively smaller."
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#eda-using-choropleth-map",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#eda-using-choropleth-map",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "4.2 EDA using Choropleth Map",
    "text": "4.2 EDA using Choropleth Map\n\n4.2.1 Joining geospatial data with aspatial data\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object shan_sf and aspatial data.frame object ict_derived. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\n\nShow the code\nshan_sf <- left_join(shan_sf, ict_derived, \n                     by = c(\"TS_PCODE\" = \"TS_PCODE\"))\n\n\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\n\n4.2.2 Preparing a choropleth map\nWe can take a quick look at the spatial distribution of radio penetration rate of Shan State at township level using a choropleth map. We can use qtm() of the tmap package to do this.\n\n\nShow the code\nqtm(shan_sf,'RADIO_PR')\n\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\n\nShow the code\nTT_HOUSEHOLDS.map <- tm_shape(shan_sf) +\n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5, \n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5)\n\nRADIO.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5, \n          style = \"jenks\", \n          title = \"HHs with Radio\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map)\n\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number of households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the distribution of total number of households and radio penetration rate by using the code chunk below.\n\n\nShow the code\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\nWe can see difference between this plot and the previous one. With the new maps, we can see that townships with relatively lesser households having a higher ratio penetration rate."
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#extracting-clustering-variables",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#extracting-clustering-variables",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.1 Extracting Clustering Variables",
    "text": "6.1 Extracting Clustering Variables\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame. Since we used the left_join() earlier, our shan_sf object includes a geometry column. Hence we need to explicitly use st_set_geometry(NULL) to drop the geometry column – merely using select() would not remove that geometry column that is hidden.\n\n\nShow the code\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR. At this stage, we also need to ensure that we only include the relevant clustering variables that we require and not any more data or it would cause errors in the clustering steps.\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\n\nShow the code\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\n\nShow the code\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#data-standardisation",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#data-standardisation",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.2 Data Standardisation",
    "text": "6.2 Data Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result to be biased towards clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n6.2.1 Min-Max Standardisation\nIn the code chunk below, normalize() of heatmaply package is used to standardisation the clustering variables by using Min-Max method. The normalize function to brings data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations. summary() is then used to display the summary statistics of the standardised clustering variables.\n\n\nShow the code\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice the change in the range of the values.\n\n\n6.2.2 Z-score Standardisation\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to standardisation the clustering variables by using Z-score method\n\n\nShow the code\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the former provides standard deviation."
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#visualising-the-standardised-clustering-variables",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#visualising-the-standardised-clustering-variables",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.3 Visualising the standardised clustering variables",
    "text": "6.3 Visualising the standardised clustering variables\nBesides reviewing summary statistics of standardised clustering variables, it is a good practice to visualise their distribution graphically.\nThe code chunk below plot the scaled Radio_PR field.\n\n\nShow the code\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"No Standardisation\") + \n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\") + \n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\") + \n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n Notice that the overall distribution of the clustering variables will change after the data standardisation. Hence, it is advisable NOT to perform data standardisation if the values range of the clustering variables are not very large."
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#computing-proximity-matrix",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#computing-proximity-matrix",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.4 Computing Proximity Matrix",
    "text": "6.4 Computing Proximity Matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\n\nShow the code\nproxmat <- dist(shan_ict, method = 'euclidean')\n\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\n\nShow the code\nproxmat\n\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#computing-hierarchical-clustering",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#computing-hierarchical-clustering",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.5 Computing Hierarchical Clustering",
    "text": "6.5 Computing Hierarchical Clustering\nIn R, there are several packages that provide hierarchical clustering functions. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employs the agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\n\nShow the code\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below. The cex= parameter scales the resolution of the dendogram to 60% so that we can view the names of the township.\n\n\nShow the code\nplot(hclust_ward, cex = 0.6)"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#selecting-the-optimal-clustering-algorithm",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#selecting-the-optimal-clustering-algorithm",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.6 Selecting the Optimal Clustering Algorithm",
    "text": "6.6 Selecting the Optimal Clustering Algorithm\nOne of the challenges in performing hierarchical clustering is to identify strong clustering structures. The issue can be solved by using agnes() function of cluster package. It functions like hclus(), however, with the agnes() function, you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggests strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\n\nShow the code\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\nIn addition, some information on different types of links (descriptions taken from in-class videos)\n\nWard´s Minimum Variance does not directly define a measure of distance between two points or clusters. It is an ANOVA based approach:\n\nAt each stage, two clusters merge, which provides the smallest increase in the combined error sum of squares from one-way univariate ANOVAs that can be done for each variable with groups defined by the clusters at that stage of the process.\nWard’s method joins clusters to maximize the likelihood at each level of the hierarchy under the assumptions of multivariate normal mixtures, spherical covariance matrices, and equal sampling probabilities.\nWard’s method tends to join clusters with a small number of observations and is strongly biased toward producing clusters with approximately the same number of observations. It is also very sensitive to outliers.\n\nAverage Link refers to the average distance between data points in the first cluster and data points in the second cluster.\n\nAt each stage of the process we combine the two clusters that have the smallest average linkage distance. \n\nMaximum or Complete Link refers to the maximum distance between any single data point in the first cluster and any single data point in the second cluster.\n\nAt each stage of the process we combine the two clusters that have the smallest complete linkage distance.\n\nMinimum or Single Link refers to the minimum distance between any single data point in the first cluster and any single data point in the second cluster.\n\nAt each stage of the process we combine the two clusters that have the smallest single linkage distance."
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#determining-optimal-clusters",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#determining-optimal-clusters",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.7 Determining Optimal Clusters",
    "text": "6.7 Determining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n6.7.1 Gap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximise the gap statistic i.e., that yields the largest gap statistic. This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\n\nShow the code\nset.seed(12345)\ngap_stat <- clusGap(shan_ict,\n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n\nprint(gap_stat, method = \"firstmax\")\n\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\n\nShow the code\nfviz_gap_stat(gap_stat)\n\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster (defeats the purpose of clustering). By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods."
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#interpreting-dendograms",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#interpreting-dendograms",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.8 Interpreting Dendograms",
    "text": "6.8 Interpreting Dendograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\n\nShow the code\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward,\n            k = 6, \n            border = c('red','green','lightblue','red','green','lightblue'))"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#visually-driven-hierarchical-clustering-analysis",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#visually-driven-hierarchical-clustering-analysis",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.9 Visually-driven Hierarchical Clustering Analysis",
    "text": "6.9 Visually-driven Hierarchical Clustering Analysis\nIn this section, I learned how to perform visually-driven hierarchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n6.9.1 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap. The code chunk below will be used to transform shan_ict data frame into a data matrix.\n\n\nShow the code\nshan_ict_mat <- data.matrix(shan_ict)\n\n\n\n\n6.9.2 Plotting Interactive Cluster Heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\n\nShow the code\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#mapping-the-clusters-found",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#mapping-the-clusters-found",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.10 Mapping the clusters found",
    "text": "6.10 Mapping the clusters found\nWith closed examination of the dendogram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\n\nShow the code\ngroups <- as.factor(cutree(hclust_ward, k=6))\n\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\n\nShow the code\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\n\nShow the code\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#converting-into-spatialpolygonsdataframe",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#converting-into-spatialpolygonsdataframe",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.1 Converting into SpatialPolygonsDataFrame",
    "text": "7.1 Converting into SpatialPolygonsDataFrame\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\n\nShow the code\nshan_sp <- as_Spatial(shan_sf)"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#computing-neighbour-list",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#computing-neighbour-list",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.2 Computing Neighbour List",
    "text": "7.2 Computing Neighbour List\nNext, poly2nb() of spdep package will be used to compute the neighbours list from polygon list. By default, neighbours will be identified by the Queen contiguity method.\n\n\nShow the code\nshan.nb <- poly2nb(shan_sp, queen = TRUE) #default is queen's contiguity\nsummary(shan.nb)\n\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we can now plot the community area boundaries as well, we plot this graph on top of the map.\nThe first plot command gives the boundaries.\nThis is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. The centroids coordinates are used as the nodes for the graph representation.\nWe also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\n\nShow the code\nplot(shan_sp, \n     border=grey(.5))\nplot(shan.nb, \n     coordinates(shan_sp), \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nPlot the boundaries first. If you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first."
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#computing-edge-costs",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#computing-edge-costs",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.3 Computing Edge Costs",
    "text": "7.3 Computing Edge Costs\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between its nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\n\nShow the code\nlcosts <- nbcosts(shan.nb, shan_ict)\nhead(lcosts)\n\n\n[[1]]\n[1] 263.3710 144.0247 430.6407 237.7849\n\n[[2]]\n[1] 257.3161 302.5179 204.3295\n\n[[3]]\n[1] 257.3161 432.1653\n\n[[4]]\n[1] 181.96406  94.61225 138.12050\n\n[[5]]\n[1] 263.3710 674.0112\n\n[[6]]\n[1] 302.51785 181.96406 140.01101  95.66782 252.26066\n\n\nFor each observation, nbcost() gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, we will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\n\nShow the code\nshan.w <- nb2listw(shan.nb,\n                   lcosts, \n                   style = \"B\")\nsummary(shan.w)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#computing-minimum-spanning-tree",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#computing-minimum-spanning-tree",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.4 Computing Minimum Spanning Tree",
    "text": "7.4 Computing Minimum Spanning Tree\nThe minimum spanning tree is computed by means of the mstree() of spdep package as shown in the code chunk below. We can display the content of shan.mst by using head() as shown in the code chunk below.\n\n\nShow the code\nshan.mst <- mstree(shan.w)\nhead(shan.mst)\n\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\n\nShow the code\nclass(shan.mst)\n\n\n[1] \"mst\"    \"matrix\"\n\n\n\n\nShow the code\ndim(shan.mst)\n\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nThe plot method for the MST includes a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\n\nShow the code\nplot(shan_sp, border=gray(.5))\nplot.mst(shan.mst, \n         coordinates(shan_sp), \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n7.4.1 Computing spatially constrained clusters using SKATER method\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\nskater() takes three mandatory arguments:-\n\nthe first two columns of the MST matrix (i.e. not the cost),\nthe data matrix (to update the costs as units are being grouped), and\nthe number of cuts, which is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters. In other words, to achieve 6 clusters, we need 6-1 = 5 cuts.\n\n\n\nShow the code\nclust6 <- skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\n\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\n\nShow the code\nstr(clust6)\n\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitrary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the cone chunk below.\n\n\nShow the code\nccs6 <- clust6$groups\nccs6\n\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table() . Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 22, which is also the number of observations in the first cluster. Note also that clusters 4 to 6 has 2 or less observations each.\n\n\nShow the code\ntable(ccs6)\n\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the 6 clusters on top of the townshop area.\n\n\nShow the code\nplot(shan_sp, border=gray(.5))\nplot(clust6, \n     coordinates(shan_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)"
  },
  {
    "objectID": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#visualising-the-clusters-in-choropleth-map",
    "href": "Exercises/Hands-on_Ex3/Hands-on_Ex3.html#visualising-the-clusters-in-choropleth-map",
    "title": "Hands-on Ex3 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.5 Visualising the clusters in choropleth map",
    "text": "7.5 Visualising the clusters in choropleth map\nThe code chunk below is used to plot the newly derived clusters by using SKATER method. We joined back the results from the previous section to the shan_sf simple feature object.\n\n\nShow the code\ngroups_mat <- as.matrix(clust6$groups)\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\nFor ease of comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\n\nShow the code\nhclust.map <- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map <- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\n\n\n\n\nAs seen above, the use of spatially constrained methods give less fragmented clusters."
  },
  {
    "objectID": "Exercises/In-class_Ex1/In-class_Ex1.html",
    "href": "Exercises/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In this in-class exercise, I learned how to compute spatial weights using R. Detailed objectives are as follows::\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Exercises/In-class_Ex1/In-class_Ex1.html#study-area-and-data",
    "href": "Exercises/In-class_Ex1/In-class_Ex1.html#study-area-and-data",
    "title": "In-class Exercise 1",
    "section": "2 Study Area and Data",
    "text": "2 Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012."
  },
  {
    "objectID": "Exercises/In-class_Ex1/In-class_Ex1.html#getting-started",
    "href": "Exercises/In-class_Ex1/In-class_Ex1.html#getting-started",
    "title": "In-class Exercise 1",
    "section": "3 Getting Started",
    "text": "3 Getting Started\nThe code chunk below will install and load sf, spdep, tmap and tidyverse packages.\n\n\nShow the code\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Exercises/In-class_Ex1/In-class_Ex1.html#import-data-into-r-environment",
    "href": "Exercises/In-class_Ex1/In-class_Ex1.html#import-data-into-r-environment",
    "title": "In-class Exercise 1",
    "section": "4 Import Data into R Environment",
    "text": "4 Import Data into R Environment\n\n4.1 Importing shape file into R\nThe code chunk below will import ESRI shape file into R.\n\n\nShow the code\nhunan <- st_read(dsn = \"data\\\\geospatial\",\n                layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `C:\\ameliachuayt\\ISSS624\\Exercises\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nThe output shows that there are 88 multipolygon features and 7 fields.\n\n\n4.2 Import csv file into R\nThe code chunk below uses read_csv() of readr package to import Hunan_2012 csv file into R. The output R object is called hunan_2012 and is in R dataframe class.\n\n\nShow the code\nhunan2012<- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n4.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\n\nShow the code\nhunan <- left_join(hunan, hunan2012)\n\n\nJoining, by = \"County\"\n\n\n\n\n4.4 Visualising Regional Development Indicator\nThe code chunk below is used to prepare two stand-alone maps: a basemap and a choropleth map showing the distribution of GDPPC 2012 by using gtm() of tmap package. Then by using tmap_arrange() of tmap package, we will create a facet map.\nNote that:\n\nGDPPC refers to Gross Domestic Product per capita.\nqtm() allows us to plot thematic maps quickly.\n\n\n\nShow the code\nbasemap <- tm_shape(hunan) + \n  tm_polygons() +\n  tm_text(\"NAME_3\", size = 0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap,gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Exercises/In-class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weight",
    "href": "Exercises/In-class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weight",
    "title": "In-class Exercise 1",
    "section": "5 Computing Contiguity Spatial Weight",
    "text": "5 Computing Contiguity Spatial Weight\nIn this section, I learned how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. This function allows us to pass a “queen” argument that takes TRUE or FALSE as options. The default is set to TRUE, which means that the function will return a list of first order neighbours using the Queen criteria by default.\n\n5.1 Computing (Queen) contiguity based neighbours\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\n\nShow the code\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two least connected region with only one neighbour.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\n\nShow the code\nwm_q[[1]]\n\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can use the code chunk below to retrieve county name of Polygon ID = 1. The output reveals that Polygon ID=1 is Anxiang county.\n\n\nShow the code\nhunan$County[1]\n\n\n[1] \"Anxiang\"\n\n\nTo reveal the county names of Anxiang county’s five neighboring polygons, the code chunk will be used:\n\n\nShow the code\nhunan$County[c(2, 3,4, 57, 85)]\n\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nAlternatively, we can combine the earlier steps to identify the five neighbours and get their names into one code chunk.\n\n\nShow the code\nhunan$County[wm_q[[1]]]\n\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nNext, let’s retrieve the GDPPC of these five counties.\n\n\nShow the code\nnb1 <- wm_q[[1]]\ngdp1 <- hunan$GDPPC[nb1]\ngdp1\n\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\n\n\n\n\n\n\nTip\n\n\n\nWe can combine them the names and GDPPC into a matrix by using cbind().\n\n\nShow the code\ncbind(hunan$County[wm_q[[1]]], gdp1)\n\n\n               gdp1   \n[1,] \"Hanshou\" \"20981\"\n[2,] \"Jinshi\"  \"34592\"\n[3,] \"Li\"      \"24473\"\n[4,] \"Nan\"     \"21311\"\n[5,] \"Taoyuan\" \"22879\"\n\n\n\n\nYou can display the complete weight matrix by using str().\n\n\nShow the code\nstr(wm_q)\n\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n5.2 Creating (ROOK) contiguity based on neighbours\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\n\nShow the code\nwm_r <- poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two least connected regions with only one neighbours.\n\n\n5.3 Visualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. Since we are working with polygons, we will need to get points in order to make our connectivity graphs. The most commonly used method to get points is to take the centroids of the polygons. We will calculate these in the sf package before moving onto the graphs.\n\n5.3.1 Getting Latitude and Longitude of Polygon Centroids\nWe need to associate each polygon with a point before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: hunan. I need the coordinates in a separate data frame for this to work. To do this I will use a mapping function.\nThe mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of hunan. Our function will be st_centroid(). We will be using map_dbl() variation of map from the purrr package. purrr is loaded when we load tidyverse.\nTo get our longitude values we map the st_centroid() function over the geometry column of hunan and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n\nShow the code\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\n\nShow the code\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\nNow that we have latitude and longitude, I used cbind to put longitude and latitude into the same object. We should check the first few observations to see if things are formatted correctly.\n\n\nShow the code\ncoords <- cbind(longitude, latitude)\nhead(coords, 5)\n\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n\n\n\n\n5.3.2 Plotting Queen contiguity based neighbours map\nWith the coordinates for each county, we can plot the neighbors through a connectivity graph.\nNotes on the arguments used in plot():\n\npch: plotting symbols available. ‘19’ refers to solid circles. Detailed list can be found here.\nadd: adds the current plot onto the previous plot\ncex: a numerical value giving the amount by which plotting text and symbols should be magnified relative to the default\n\n\n\nShow the code\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n5.3.3 Plotting Rook contiguity based neighbours map\n\n\nShow the code\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n5.3.4 Plotting both Queen and Rook contiguity based neighbours maps\n\n\nShow the code\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")\n\n\n\n\n\nSince the queen criterion is somewhat more encompassing than rook criterion, the number of neighbors according to the queen criterion will always be at least as large as for the rook criterion. We can observe this in the above maps as well.\n\nRook criterion: defines neighbors by the existence of a common edge between two spatial units.\nQueen criterion: defines neighbors as spatial units sharing a common edge or a common vertex."
  },
  {
    "objectID": "Exercises/In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbours",
    "href": "Exercises/In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbours",
    "title": "In-class Exercise 1",
    "section": "6 Computing distance based neighbours",
    "text": "6 Computing distance based neighbours\nIn this section, I learned how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\ndnearneigh(x, d1, d2, row.names = NULL, longlat = NULL, bounds=c(\"GE\", \"LE\"),\n use_kd_tree=TRUE, symtest=FALSE, use_s2=packageVersion(\"s2\") > \"1.0.7\", k=200,\n dwithin=TRUE)\n\n6.1 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nknearneigh(x, k=1, longlat = NULL, use_kd_tree=TRUE)\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n\nShow the code\nk1 <- knn2nb(knearneigh(coords, k=1)) #default k = 1\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nhead(k1dists,5)\n\n\n[1] 25.53398 43.03114 25.53398 29.28480 29.28480\n\n\n\n\nShow the code\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n6.2 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh()as shown below.\n\n\nShow the code\nwm_d62 <- dnearneigh(coords,0,62, longlat = TRUE)\nwm_d62\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nFrom the output, we see that the average number of links is 3.68. This means that on average, the number of links each polygons has 3.68.\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\n\nShow the code\nstr(wm_d62)\n\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\n\nShow the code\ntable(hunan$County, card(wm_d62))\n\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\nn.comp.nb() finds the number of disjoint connected subgraphs in the graph depicted by nb.obj - a spatial neighbours list object.\n\n\nShow the code\nn_comp <- n.comp.nb(wm_d62)\nn_comp\n\n\n$nc\n[1] 1\n\n$comp.id\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[77] 1 1 1 1 1 1 1 1 1 1 1 1\n\n\n\n\nShow the code\ntable(n_comp$comp.id)\n\n\n\n 1 \n88 \n\n\n\n6.2.1 Plotting fixed distance weight matrix\nNext, I will plot the distance weight matrix by using the code chunk below.\n\n\nShow the code\nplot(hunan$geometry, border = 'lightgrey') #base map\nplot(wm_d62, coords, add = TRUE) #neighbours within 62km\nplot(k1, coords, add = TRUE, col = 'red', length = 0.8) #1st nearest neigbours\n\n\n\n\n\n\n\nShow the code\npar(mfrow = c(1,2))\nplot(hunan$geometry, border = \"lightgrey\",main=\"1st nearest neighbours\" )\nplot(k1, coords, add = TRUE, col = \"red\", length = 0.88, )\n\nplot(hunan$geometry, border = \"lightgrey\", main = \"Distance Link\")\nplot(wm_d62, coords, add = TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n6.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\n\nShow the code\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSince we set k=6, the average number of links is also 6 since each county has 6 neighbours.\nSimilarly, we can display the content of the matrix by using str(). Notice that each county has exactly 6 neighbours.\n\n\nShow the code\nstr(knn6)\n\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n6.3.1 Plotting distance based neighbours\nWe can plot the weight matrix using the code chunk below.\n\n\nShow the code\nplot(hunan$geometry, color = 'lightgrey')\n\n\nWarning in title(...): \"color\" is not a graphical parameter\n\n\nShow the code\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = 'red')"
  },
  {
    "objectID": "Exercises/In-class_Ex1/In-class_Ex1.html#weights-based-on-idw",
    "href": "Exercises/In-class_Ex1/In-class_Ex1.html#weights-based-on-idw",
    "title": "In-class Exercise 1",
    "section": "7 Weights based on IDW",
    "text": "7 Weights based on IDW\nIn this section, I learned how to derive a spatial weight matrix based on Inversed Distance method.\nFirstly, let’s compute the distances between areas by using nbdists() of spdep.\n\n\nShow the code\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x)) #i.e. inverse distance = 1/distance\nhead(ids,10)\n\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n\n\n7.1 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.\nWhile this is the most intuitive way to summarise the neighbors’ values, it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\nFor this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\n\n\nShow the code\nrswm_q <- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\nrswm_q\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nTo see the weight of the first polygon’s four neighbors type:\n\n\nShow the code\nrswm_q$weights[1]\n\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nEach neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\n\nShow the code\nrswm_ids <- nb2listw(wm_q, glist = ids, style = \"B\", zero.policy = TRUE)\nrswm_ids\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\n\nShow the code\nrswm_ids$weights[1]\n\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\n\nShow the code\nsummary(unlist(rswm_ids$weights))\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Exercises/In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "href": "Exercises/In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "title": "In-class Exercise 1",
    "section": "8 Application of Spatial Weight Matrix",
    "text": "8 Application of Spatial Weight Matrix\nIn this section, I learned how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average and\nspatial window sum.\n\n\n8.1 Spatial lag with row-standardised weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\n\nShow the code\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecall that in the previous section, we retrieved the GDPPC of these five counties by using the code chunk below\n\n\nShow the code\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n\n[1] 20981 34592 24473 21311 22879\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuestion: Can you see the meaning of Spatial lag with row-standardized weights now?\n\n\nShow the code\nmean(nb1)\n\n\n[1] 24847.2\n\n\nTaking the mean of the GDPPC of the five neighbours of county 1 will return the same value as the first value of GDPPC.lag.\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\n\nShow the code\nlag.list <- list(hunan$County, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"County\", \"lag GDPPC\")\nhead(lag.res)\n\n\n   County lag GDPPC\n1 Anxiang  24847.20\n2 Hanshou  22724.80\n3  Jinshi  24143.25\n4      Li  27737.50\n5   Linli  27270.25\n6  Shimen  21248.80\n\n\n\n\nShow the code\nhunan <- left_join(hunan, lag.res)\n\n\nJoining, by = \"County\"\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\n\nShow the code\nhead(hunan)\n\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\n\nShow the code\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp = 1, ncol =2)\n\n\n\n\n\n\n\n8.2 Spatial lag as a sum of neighbouring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw() to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply(), which applies a function across each value in the neighbors structure.\n\n\nShow the code\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nhead(b_weights)\n\n\n[[1]]\n[1] 1 1 1 1 1\n\n[[2]]\n[1] 1 1 1 1 1\n\n[[3]]\n[1] 1 1 1 1\n\n[[4]]\n[1] 1 1 1 1\n\n[[5]]\n[1] 1 1 1 1\n\n[[6]]\n[1] 1 1 1 1 1\n\n\nShow the code\nb_weights2 <- nb2listw(wm_q,\n                       glist = b_weights,\n                       style = \"B\")\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw() to compute a lag variable from our weight and GDPPC.\n\n\nShow the code\nlag_sum <- list(hunan$County, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"County\", \"lag_sum GDPPC\")\nhead(lag.res)\n\n\n   County lag_sum GDPPC\n1 Anxiang        124236\n2 Hanshou        113624\n3  Jinshi         96573\n4      Li        110950\n5   Linli        109081\n6  Shimen        106244\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuestion: Can you understand the meaning of Spatial lag as a sum of neighbouring values now?\nLike the term suggests, the spatial lag is now the sum of neighbouring values. We can verify by taking the sum of county 1’s neighbours’ GDPPC.\n\n\nShow the code\nsum(nb1)\n\n\n[1] 124236\n\n\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\n\nShow the code\nhunan <- left_join(hunan, lag.res)\n\n\nJoining, by = \"County\"\n\n\nNow, we can plot both GDPPC and Spatial Lag Sum GDPPC for comparison.\n\n\nShow the code\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\n\n8.3 Spatial Window Average\nThe spatial window average uses row-standardises weights and includes the diagonal element. To do this in R, we need to go back to the neighbours structure and add the diagonal element before assignment weights. To begin, we assign wm_q to a new variable because we will directly alter its structure to add the diagonal elements.\n\n\nShow the code\nwm_q1 <- wm_q\n\n\nTo add the diagonal element to the neighbour list, we can use include.self() from spdep.\n\n\nShow the code\nwm_q1 <- include.self(wm_q1)\n\n\nNow obtain weights with nb2listw().\n\n\nShow the code\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nWe can create the lag variable from our weight structure and GDPPC variable.\n\n\nShow the code\nlag_w_avg_gdppc <- lag.listw(wm_q1,\n                             hunan$GDPPC)\n\nlag.list.wm_q1 <- list(hunan$County, lag_w_avg_gdppc)\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"County\", \"lag_window_avg GDPPC\")\n\n\nLet’s append the lag_window_avg GDPPC values onto hunan sf data.frame.\n\n\nShow the code\nhunan <- left_join(hunan, lag_wm_q1.res)\n\n\nJoining, by = \"County\"\n\n\nFinally, let’s compare the GDPPC and lag_window_avg GDPPC.\n\n\nShow the code\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\n\n8.4 Spatial Window Sum\nThe spatial window sum is the country part of window average, but without using row-standardised weights. To do this, we assign binary weights to the neighbour structure that includes the diagonal element.\n\n\nShow the code\nwm_q1 <- wm_q\n\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\n\nShow the code\nwm_q1 <- include.self(wm_q1)\n\n\n\n\nShow the code\nwm_q1\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\n\nShow the code\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\n\nShow the code\nb_weights2 <- nb2listw(wm_q1,\n                       glist = b_weights,\n                       style = \"B\")\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\n\nShow the code\nw_sum_gdppc <- list(hunan$County, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"County\", \"w_sum GDPPC\")\n\n\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\n\nShow the code\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\n\nJoining, by = \"County\"\n\n\nLastly, qtm() of tmap package is used to plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison.\n\n\nShow the code\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Exercises/In-class_Ex1/In-class_Ex1.html#references",
    "href": "Exercises/In-class_Ex1/In-class_Ex1.html#references",
    "title": "In-class Exercise 1",
    "section": "9 References",
    "text": "9 References\n\nhttps://r4gdsa.netlify.app/chap03.html#spatial-lag-as-a-sum-of-neighboring-values\nhttps://spatialanalysis.github.io/handsonspatialdata/contiguity-based-spatial-weights.html"
  },
  {
    "objectID": "Exercises/In-class_Ex2/In-class_Ex2.html",
    "href": "Exercises/In-class_Ex2/In-class_Ex2.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "In this exercise, we will be using the following packages:\n\nsf: for importing, managing, and processing geospatial data\ntmap: for performing data science tasks such as importing, wrangling and visualising data\ntidyverse: for performing data science tasks such as importing, wrangling and visualising data\nspdep: used to create spatial weights matrix objects from polygon ‘contiguities’\nfunModeling: used for rapid Exploratory Data Analysis\n\nWe will use pacman, a R package management tool to install and load the packages.\n\n\nShow the code\npacman::p_load(sf, tmap, tidyverse, spdep, funModeling)"
  },
  {
    "objectID": "Exercises/In-class_Ex2/In-class_Ex2.html#importing-geospatial-data",
    "href": "Exercises/In-class_Ex2/In-class_Ex2.html#importing-geospatial-data",
    "title": "In-class Exercise 2",
    "section": "2 Importing Geospatial Data",
    "text": "2 Importing Geospatial Data\nIn this in-class exercise, two geospatial data sets will be used:\n\nNigeria Level-2 Administrative Boundary (also known as Local Government Area or LGA) polygon feature GIS data. The data was obtained from geoBoundaries.\nWPdx+ data set that was obtained from Water Point Data Exchange (WPdx). It consists of water point related data from rural areas at the water point or small water scheme level. The entire set of data includes countries other than Nigeria. Hence, we will be performing data pre-processing to extract the relevant data. This is also in the shape file format.\n\n\n2.1 Import Nigeria LGA boundary data\n\n\nShow the code\nnga <- st_read(dsn = \"data\\\\geospatial\\\\\",\n                   layer = \"geodata_NGA_ADM2\",\n                   crs = 4326)\n\n\nReading layer `geodata_NGA_ADM2' from data source \n  `C:\\ameliachuayt\\ISSS624\\Exercises\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\n2.2 Import Nigeria Water Points data\nThe code chunk below will import our geospatial data. We indicated crs = 4326 as we know that this data is in the wgs84 format. We know this by looking at the projection file (.prj contains projection information).\nWhile there are various file formats available for download e.g. .csv, .shp. The benefit of using the .shp file is that we can save one step of converting the .csv file into geospatial file using the latitude and longitude data.\n\n\nShow the code\nwp <- st_read(dsn = \"data\\\\geospatial\\\\\",\n                   layer = \"wp_geodata\",\n                   crs = 4326) %>% \n  filter(clean_coun == \"Nigeria\")\n\n\nNext, we will use write_rds() of readr package to save the extracted sf data table (i.e. wp) into an output file in .rds data format. The output file is called wp_nga.rds and it is saved in geospatial sub-folder.\n\n\nShow the code\nwp_nga <- write_rds(wp, \n                   \"data\\\\geospatial\\\\wp_nga.rds\")"
  },
  {
    "objectID": "Exercises/In-class_Ex2/In-class_Ex2.html#data-wrangling",
    "href": "Exercises/In-class_Ex2/In-class_Ex2.html#data-wrangling",
    "title": "In-class Exercise 2",
    "section": "3 Data Wrangling",
    "text": "3 Data Wrangling\n\n3.1 Recoding NGA values into string\nWe will read the saved .rds file. It will look at the status_cle column and replace NA values with ‘unknown’ using replace_na().\n\n\nShow the code\nwp_nga <- read_rds('data\\\\geospatial\\\\wp_nga.rds') %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\n\n\n\n3.2 Exploratory Data Analysis\nIn the code chunk below, freq() of funModelling package is used to display the distribution of status_cle field in wp_nga.\n\n\nShow the code\nfreq(data = wp_nga,\n      input = 'status_cle')\n\n\nFrom the output above, we can see that there are 9 categories. Almost half of all water pipes are functional and approximately 11% with status unknown.\n\n\n3.3 Extract functional water points\nIn the code chunk below, filter() of dplyr package is used to select functional water points.\n\n\nShow the code\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nUsing the below code chunk, we can see the breakdown of functional statuses.\n\n\nShow the code\nfreq(data = wpt_functional, input = 'status_cle')\n\n\nClose to 80% of the water points are fully functional. The rest requires repair or are not in use.\n\n\n3.4 Extract non-functional water points\nWe can do the same for non-functional water points.\n\n\nShow the code\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Non-Functional\",\n             \"Non-Functional due to dry season\",\n             \"Non Functional due to dry season\",\n             \"Abandoned/Decommissioned\",\n             \"Abandoned\"))\n\n\nUsing the below code chunk, we can see the breakdown of non-functional statuses.\n\n\nShow the code\nfreq(data = wpt_nonfunctional, input = 'status_cle')\n\n\nThere is 90% of water points that are non-functional, another 7% are non-functional due to the weather. The remaining are abandoned or decommissioned.\n\n\n3.5 Extract water point with unknown class\n\n\nShow the code\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")\n\n\n\n\n3.6 Performing Point-in-Polygon count\nIn the code chunk below, we will use st_intersect() yo identify which LGA respectively types of water points are located in and lengths() to count the number of water points that fall inside each LGA area.\n\n\nShow the code\nnga_wp <- nga %>%\n  mutate(`total_wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt_functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt_nonfunctional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt_unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))"
  },
  {
    "objectID": "Exercises/In-class_Ex2/In-class_Ex2.html#saving-the-analytical-data-table",
    "href": "Exercises/In-class_Ex2/In-class_Ex2.html#saving-the-analytical-data-table",
    "title": "In-class Exercise 2",
    "section": "4 Saving the Analytical Data Table",
    "text": "4 Saving the Analytical Data Table\n\n\nShow the code\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt_functional`/ `total_wpt`) %>%\n  mutate(pct_nonfunctional = `wpt_nonfunctional`/ `total_wpt`) %>%\n  select(1, 6:12)\n\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.\nto keep the file size small, select() of dplyr is used to retain selected fields\n\nLet’s save the new sf data table into .rds format.\n\n\nShow the code\nwrite_rds(nga_wp,\n          \"data\\\\geospatial\\\\wp_nga.rds\")"
  },
  {
    "objectID": "Exercises/In-class_Ex2/In-class_Ex2.html#visualising-the-spatial-distribution-of-water-points",
    "href": "Exercises/In-class_Ex2/In-class_Ex2.html#visualising-the-spatial-distribution-of-water-points",
    "title": "In-class Exercise 2",
    "section": "5 Visualising the Spatial Distribution of Water Points",
    "text": "5 Visualising the Spatial Distribution of Water Points\nIn the code chuck below, we will use qtm() to quickly plot the spatial distribution of water points of different categories. We will use tmap_arrange() to show the plots together.\n\n\n\n\n\nShow the code\ntotal <- qtm(nga_wp, fill = 'total_wpt')\nfunc <- qtm(nga_wp, fill = 'wpt_functional')\nnonfunc <- qtm(nga_wp, fill = 'wpt_nonfunctional')\nunknown <- qtm(nga_wp, fill = 'wpt_unknown')\n\ntmap_arrange(total, unknown, func, nonfunc, asp = 1, ncol = 2)\n\n\n\n\n\nFrom the maps above, we can see that there are some areas with little (<200) water points and areas with >800 water points. Also, towards the southern area of the map, we can see that there are areas where water pumps statuses are unknown, probably due to lack of updating. It appears that the top center of Nigeria have higher amount of functional water points."
  },
  {
    "objectID": "Exercises/In-class_Ex2/In-class_Ex2.html#conclusion",
    "href": "Exercises/In-class_Ex2/In-class_Ex2.html#conclusion",
    "title": "In-class Exercise 2",
    "section": "6 Conclusion",
    "text": "6 Conclusion\nFrom what we have achieved in this exercise, we have grounds to believe that there might exist some relationship in how water points co-occur in Nigeria. We will explore more in Take-Home Exercise 1."
  },
  {
    "objectID": "Exercises/Take-home_Ex1/Take-home_Ex1.html",
    "href": "Exercises/Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "",
    "text": "Water is an essential resource that not only supports life but also drives economic development. According to the World Bank, approximately 2 billion people in the world do not have safely managed drinking water services and 3.6 billion people lack safely managed sanitation services1. Developing countries are most affected by the shortage of water. The lack of ground water threatens their fight against poverty, food and water security and socio-economic development2.\n\n\nOrganisations like the World Bank, UNICEF and Water Point Data Exchange (WPdx) have various plans and schemes in place to combat this issue. In particular, WPdx has it in their mission to unlock potential of water point data to improve rural water services through evidence-based decision-making. It maintains a global data repository for data collected from rural areas at the water point or small water scheme level. A notable point is that data is formatted according to the WPdx Data Standard before being uploaded and published onto the repository. Using these information, decision support tools linked to the repository will be able to perform advanced analyses seamlessly3.\n\n\n\nGeospatial analytics hold tremendous potential to address complex societal problems like water shortage. In this study, I will apply appropriate global and local measures of spatial association techniques to reveal the spatial patterns of functional and non-functional water points. This will include will not limited to the following tasks:\n\nUsing appropriate sf method, import the shape file into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.\nUsing appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nPerforming outliers/clusters analysis by using appropriate local measures of spatial association methods.\nPerforming hot spot area analysis by using appropriate local measures of spatial association methods.\n\n\n\n\nThe focus of this study would be Nigeria. Nigeria is located in West Africa and is the most populous country in Africa. The states are grouped into six geopolitical zones, the North Central, North East, North West, South West, South East and South4. UNICEF estimates that one third of Nigeria children do not have sufficient water to meet daily needs5."
  },
  {
    "objectID": "Exercises/Take-home_Ex1/Take-home_Ex1.html#setting-the-analytical-tools",
    "href": "Exercises/Take-home_Ex1/Take-home_Ex1.html#setting-the-analytical-tools",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "2.1 Setting the Analytical Tools",
    "text": "2.1 Setting the Analytical Tools\nThe code chunk below installs and loads sf, spdep, tmap, tidyverse, patchwork packages into R environment. pacman() is a R package management tool.\n\n\nShow the code\npacman::p_load(sf, spdep, tmap, tidyverse, patchwork)"
  },
  {
    "objectID": "Exercises/Take-home_Ex1/Take-home_Ex1.html#data",
    "href": "Exercises/Take-home_Ex1/Take-home_Ex1.html#data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "3.1 Data",
    "text": "3.1 Data\nAs mentioned in the earlier section, the focus of this study is Nigeria. Two data sets will be used in this study. They are:\n\nNigeria Level-2 Administrative Boundary (also known as Local Government Area or LGA) polygon feature GIS data. The data was obtained from geoBoundaries.\nWPdx+ data set that was obtained from Water Point Data Exchange (WPdx). It consists of water point related data from rural areas at the water point or small water scheme level. The entire set of data includes countries other than Nigeria. Hence, we will be performing data pre-processing to extract the relevant data.\n\n\n\n\n\n\nTip\n\n\n\nThe raw WPdx+ data file is 427mb and exceeds the upload limit of Github. In the next section, we will extract the relevant and necessary information, extract it into a .rds file and use the file for subsequent analysis. The raw file will not be pushed to Github to avoid crashing the Github repository."
  },
  {
    "objectID": "Exercises/Take-home_Ex1/Take-home_Ex1.html#importing-the-data-into-r-environment",
    "href": "Exercises/Take-home_Ex1/Take-home_Ex1.html#importing-the-data-into-r-environment",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "3.2 Importing the data into R Environment",
    "text": "3.2 Importing the data into R Environment\nThe geospatial data is in ESRI shape file format and the attribute table is in csv format.\n\n3.2.1 Importing Geospatial data into R\nThe code chunk below uses st_read() function of sf package to import geoBoundaries-NGA-ADM2 shape file into R as a polygon feature data frame. The imported shape file will be a simple features object of sf.\n\n\nShow the code\nnigeria <- st_read(dsn = \"data\\\\geospatial\",\n                   layer = \"geoBoundaries-NGA-ADM2\")\n\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\ameliachuayt\\ISSS624\\Exercises\\Take-home_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nFrom the output, we can see that there are 774 multipolygons features with 5 fields. nigeria is in WGS 84 coordinates system. The bounding box provides the x extend and y extend of the data.\nTo learn more about the attribute information, we can apply glimpse() of dplyr package.\n\n\nShow the code\nglimpse(nigeria)\n\n\nRows: 774\nColumns: 6\n$ shapeName  <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ Level      <chr> \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"AD…\n$ shapeID    <chr> \"NGA-ADM2-72505758B79815894\", \"NGA-ADM2-72505758B67905963\",…\n$ shapeGroup <chr> \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NG…\n$ shapeType  <chr> \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"AD…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((7.401109 5...., MULTIPOLYGON (…\n\n\nThe printout above details the data type of each field. For instance, $ shapeName is in character data type.\n\n\n3.2.2 Importing attribute data into R\nThe WPdx+ data set has 70 columns and 406,566 rows.\n\n\nShow the code\nwpdx <- read_csv(\"data\\\\aspatial\\\\Water_Point_Data_Exchange.csv\", show_col_types = FALSE)\n\n\nAt any point in time when we wish to see the columns of a dataframe, we can use glimpse(). glimpse() allows us to see all columns and their data type in the data frame which is very helpful since we have 70 columns.\n\n\nShow the code\nglimpse(wpdx)"
  },
  {
    "objectID": "Exercises/Take-home_Ex1/Take-home_Ex1.html#data-wrangling---geospatial-data",
    "href": "Exercises/Take-home_Ex1/Take-home_Ex1.html#data-wrangling---geospatial-data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "3.3 Data Wrangling - Geospatial Data",
    "text": "3.3 Data Wrangling - Geospatial Data\n\n3.3.1 Rename Columns\nFor ease of referencing, let’s rename shapeName to LGA.\n\n\nShow the code\nnigeria <- nigeria %>% \n    rename(`LGA` = `shapeName`)\n\n\n\n\n3.3.2 Check for Duplicates\nUsing duplicated() from R base functions, we can seek out LGA names that might be duplicated. This step is important for later part of the analysis.\n\n\nShow the code\nnigeria$LGA[duplicated(nigeria$LGA)==TRUE]\n\n\nBased on the above, we have 6 LGAs that have the same name. A desk-based research using the coordinates showed that there are two scenarios that led to this duplication:\n\nIdentically named LGAs are located in different states. For instances, there is a Bassa in Kogi State and Plateau State.\nThere is a misspelling. In the case of Nasawara, one of it should be spelled as Nassarawa.\n\nLet’s correct these errors:\n\n\nShow the code\nnigeria$LGA[94] <- \"Bassa_Kogi\"\nnigeria$LGA[95] <- \"Bassa_Plateau\"\nnigeria$LGA[304] <- \"Ifelodun, Kwara\"\nnigeria$LGA[305] <- \"Ifelodun, Osun\"\nnigeria$LGA[355] <- \"Irepodun, Kwara\"\nnigeria$LGA[356] <- \"Irepodun, Osun\"\nnigeria$LGA[519] <- \"Nassarawa, Kano\"\nnigeria$LGA[546] <- \"Obi, Benue\"\nnigeria$LGA[547] <- \"Obi, Nasarawa\"\nnigeria$LGA[693] <- \"Surulere, Lagos\"\nnigeria$LGA[694] <- \"Surulere, Oyo\"\n\n\nNext, let’s double check that the corrections are made.\n\n\nShow the code\nnigeria$LGA[duplicated(nigeria$LGA)==TRUE]"
  },
  {
    "objectID": "Exercises/Take-home_Ex1/Take-home_Ex1.html#data-wrangling---aspatial-data",
    "href": "Exercises/Take-home_Ex1/Take-home_Ex1.html#data-wrangling---aspatial-data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "3.4 Data Wrangling - Aspatial Data",
    "text": "3.4 Data Wrangling - Aspatial Data\nThe entire data set is large, and we need only to extract the relevant information required for the analysis. The focus of the study is Nigeria and the analysis will be done at the Level-2 Administrative Boundary (or LGA) level. Therefore, we will be performing steps to:\n\nExtract data belonging to Nigeria and\nGroup water points according to their functional status at the LGA level.\n\nBesides the above, we will also be performing data preparation and wrangling techniques to surface data issues and resolve them prior to the analysis. Before we start our data wrangling, it would be useful to inspect the metadata to understand what each column represents.\n\n3.4.1 Extract data belonging to Nigeria\nTo learn which column(s) to use to filter for Nigeria’s data, we can inspect the metadata. We will not display the entire metadata here as it is lengthy. However, here is an excerpt of some columns:\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\n#clean_country_name\nCleaned version of the country name based on provided GPS coordinates.\n\n\n#clean_adm1\nCleaned version of the Primary Administrative Division data based on provided GPS coordinates and GADM boundaries.\n\n\n#clean_adm2\nCleaned version of the Secondary Administrative Division data based on provided GPS coordinates and GADM boundaries.\n\n\n#status_id\nIdentify if any water is available on the day of the visit, recognizing that it may be a limited flow.\n\n\n#status_clean\nCategorized version of the #status parameter. Based on terms from the #status entry, status_clean includes 5 categories: Fully functional, Functional but needs repair, Non functional and needs repair, Non functional due to dry season, Abandoned and Other. These categories will continue to evolve and will be refined in future updates.\n\n\n#status\nStatus of the physical/mechanical condition of the water point.\n\n\n\nBased on the above, we can use #clean_country_name to filter out rows belonging to Nigeria. This can be done using the code chunk below. The filtered data set will be saved as wpdx_nigeria. We can also inspect the first few rows of the data by using head().\n\n\nShow the code\nwpdx_nigeria <- wpdx %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\nhead(wpdx_nigeria)\n\n\nLet’s use dim() to reveal the dimensions of the wpdx_nigeria.\n\n\nShow the code\ndim(wpdx_nigeria)\n\n\nThe output of the above code would reveal that wpdx_nigeria has 95,008 rows and 70 columns.\n\n\n3.4.2 Resolving Misspellings\n#status_clean provides us the status of the water points. Using the code chunk below, we use count() dplyr package to count the frequency of the each location and/or category.\n\n\nShow the code\ncount(wpdx_nigeria, `#status_clean`)\n\n\n\nOutput of count(wpdx_nigeria, `#status_clean`)\n\n\n#status_clean\nn\n\n\n\n\nAbandoned\n175\n\n\nAbandoned/Decommissioned\n234\n\n\nFunctional\n45,883\n\n\nFunctional but needs repair\n4,579\n\n\nFunctional but not in use\n1,686\n\n\nNon-Functional\n29,385\n\n\nNon-Functional due to dry season\n2,403\n\n\nNon Functional due to dry season\n7\n\n\nNA\n10,656\n\n\n\nFrom the output above, we observe two issues for the #status_clean column: misspellings, missing data and too many categories. Let’s tackle misspellings first.\nWe can easily see that there two similar categories “Non functional due to dry season” = “Non-Functional due to dry season”. One is spelled with a dash and one without. Let’s correct this by using the recode() from dplyr package.\n\n\nShow the code\n#recode \nwpdx_nigeria_clean <- wpdx_nigeria %>%\n  mutate(`#status_clean` = recode(`#status_clean`, \"Non functional due to dry season\" = \"Non-Functional due to dry season\"))\n\n\nWe can confirm that the categories has been recoded correctly by running count() again.\n\n\nShow the code\n#re-run the frequency count\ncount(wpdx_nigeria_clean, `#status_clean`)\n\n\n\n\n3.4.3 Missing values\nWe also note that there are 10,656 missing values in the #status_clean column. Let’s rename all the NA as ‘Unknown’.\n\n\nShow the code\n#recode\nwpdx_nigeria_clean <- wpdx_nigeria_clean %>%\n    mutate(`#status_clean` = replace_na(`#status_clean`, \"Unknown\"))\n\n\n\n\nShow the code\ncount(wpdx_nigeria_clean, `#status_clean`)\n\n\n\n\n3.4.4 Aggregate to reduce categories\nIn our study, we would like know the functional and non-functional water points. Therefore, we can actually aggregate our data into three categories: functional, non-functional and unknown as follows:\n\n\n\nOld Category\nNew Category\n\n\n\n\nAbandoned\nNon-Functional\n\n\nAbandoned/Decommissioned\nNon-Functional\n\n\nFunctional\nFunctional (no change)\n\n\nFunctional but needs repair\nFunctional\n\n\nFunctional but not in use\nFunctional\n\n\nNon-Functional\nNon-Functional (no change)\n\n\nNon-Functional due to dry season\nNon-Functional\n\n\nUnknown\nUnknown (no change)\n\n\n\nWe will create a new column that states whether the water point if functional or not using the code chunk below.\n\n\nShow the code\n#recode\nwpdx_nigeria_clean <- wpdx_nigeria_clean %>%\n  mutate(`Functional_Status` = `#status_clean`) %>%\n  mutate(`Functional_Status` = recode(`Functional_Status`,\n        \"Abandoned\" = \"Non-Functional\",\n        \"Abandoned/Decommissioned\" = \"Non-Functional\",\n        \"Functional but needs repair\" = \"Functional\",\n        \"Functional but not in use\" = \"Functional\",\n        \"Non-Functional due to dry season\" = \"Non-Functional\"))\n\n\nAgain, we can re-run the frequency count to confirm the recode has been performed.\n\n\nShow the code\n#re-run the frequency count\ncount(wpdx_nigeria_clean, `Functional_Status`)\n\n\n\n\n3.4.5 Rename Columns\nLet us rename #clean_adm2 to LGA.\n\n\nShow the code\nwpdx_nigeria_clean <- wpdx_nigeria_clean %>% \n    rename(`LGA` = `#clean_adm2`)\n\n\n\n\n3.4.6 Drop Unwanted Columns\n\n\nShow the code\nwpdx_nigeria_simple <- subset(wpdx_nigeria_clean , \n                              select = c(\"LGA\", \"#lat_deg\", \n                                        \"#lon_deg\",\"Functional_Status\"))\n\n#\"#water_source_clean\",\n# \"#water_source_category\", \"#distance_to_primary_road\",\n# \"#distance_to_secondary_road\", \"#distance_to_tertiary_road\",\n# \"#distance_to_city\", \"#distance_to_town\", \"usage_capacity\",\n# \"is_urban\", \"cluster_size\", \n\n\n\n\n3.4.7 Creating a simple feature data frame\nNext, we will create a simple feature data frame from wpdx_nigeria_simple. This is done using the code chunk below.\n\n\nShow the code\nwpdx_nigeria_sf <- st_as_sf(wpdx_nigeria_simple, \n                    coords = c(\"#lon_deg\",\"#lat_deg\"), \n                    crs=4326) \n\n\nWe can examine the content of this newly created simple feature data frame using the following code chunk.\n\n\nShow the code\nglimpse(wpdx_nigeria_sf)\n\n\nFrom the output, we see that a new column called geometry has been added and the original #lon_deg and #lat_deg columns have been removed.\nWe can also use st_geometry() to retrieve the geometry list-column as shown in the code chunk below.\n\n\nShow the code\nst_geometry(wpdx_nigeria_sf)\n\n\nThe output displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data. What we can see is that wpdx_nigeria_sf is in the WGS 84 coordinate system.\n\n\n3.4.8 Point in Polygon Count\n\n\nShow the code\nfunctional <- wpdx_nigeria_sf %>%\n  filter(`Functional_Status` == 'Functional')\n\nnon_functional <- wpdx_nigeria_sf %>%\n  filter(`Functional_Status` == 'Non-Functional')\n\nunknown <- wpdx_nigeria_sf %>%\n  filter(`Functional_Status` == 'Unknown')\n\n\nNext, we can count the number of water points in each LGA using the following code chunk. Two operations are happening at the same time. First, the code chunk identifies water points located inside each LGA by using st_intersects(). Next, lengths() of Base R is used to calculate the number of water points that fall inside each LGA.\n\n\nShow the code\nnigeria$wpt_functional <- lengths(st_intersects(nigeria, functional))\nnigeria$wpt_nonfunctional <- lengths(st_intersects(nigeria, non_functional))\nnigeria$wpt_unknown <-lengths(st_intersects(nigeria, unknown))\nnigeria$wpt_total <- lengths(st_intersects(nigeria, functional)) + \n  lengths(st_intersects(nigeria, non_functional)) + \n  lengths(st_intersects(nigeria, unknown))\n\n\n\n\nShow the code\nsum(nigeria$wpt_total)\n\n\n\n\n3.4.9 Derive new features\n\n\nShow the code\nnigeria <- nigeria %>%\n  mutate(pct_functional = `wpt_functional`/ `wpt_total`) %>%\n  mutate(`pct_functional` = replace_na(`pct_functional`, 0)) %>%\n  mutate(pct_nonfunctional = `wpt_nonfunctional`/ `wpt_total`) %>%\n  mutate(`pct_nonfunctional` = replace_na(`pct_nonfunctional`, 0))\n\n\n\n\n3.4.10 Transforming Coordinate System\nWe will transform nigeria from geographic coordinate system to projected coordinate system. We need to do this transformation because the geographic coordinate system is inappropriate if the analysis require the use of distance and/or area measurements. This would be at the later stage where we compute distance-based contiguity weight matrices.\nThere are three Projected Coordinate Systems of Nigeria: EPSG: 26391, 26392, and 26303. For this study, we will be EPSG 26391. We can use the st_transform() of the sf package to re-project nigeria from one coordinate system to another coordinate system mathematically.\nWe will save a copy of the nigeria in the geographic coordinate system before the projection.\n\n\nShow the code\nnigeria_gcs <- nigeria \nnigeria <- st_transform(nigeria, crs = 26391)\n\n\nNext, let us display the content of nigeria sf data frame as shown below.\n\n\nShow the code\nst_geometry(nigeria)\n\n\nNotice that it is in projected coordinate system now. Furthermore, if you refer to Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.\n\n\n3.4.11 Saving the Analytical Data Table\nNext, let’s save our cleaned data into .rds data format files using the write_rds() of readr package. The output file is called wp_nga.rds and it is saved in rds sub-folder. We do this to shorten the loading time and more importantly, we can avoid uploading the large raw files onto GitHub.\n\n\nShow the code\nwrite_rds(nigeria, \"data\\\\rds\\\\wp_nga.rds\")\n\n\n\n\n\nNote: WPdx+ also offers the data in shape file format. We can also download that version for our analysis. This is covered here, if you wish to learn more."
  },
  {
    "objectID": "Exercises/Take-home_Ex1/Take-home_Ex1.html#water-point-density-using-histograms",
    "href": "Exercises/Take-home_Ex1/Take-home_Ex1.html#water-point-density-using-histograms",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.1 Water Point Density using Histograms",
    "text": "4.1 Water Point Density using Histograms\nWhile our interest is in geographical distribution of functional and non-functional water points, it would be interesting to see the water point density too. To do this, we must first compute the area of LGA and then the water point density.\nThe code chunk below uses st_area() of sf package to derive the area of each LGA. We are creating a new column Area to store the area values.\n\n\nShow the code\nnigeria$Area <- nigeria %>%\n  st_area()\n\n\n\n\nShow the code\nnigeria <- nigeria %>%\n  mutate(`wpt_func_density` = (`wpt_functional` / Area * 1000000))\n\n\n\n\nShow the code\nggplot(data=nigeria,\n       aes(x=as.numeric(`wpt_func_density`))) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill = \"pink\") + \n  labs(title = \"Are functional water points evenly distributed in Nigeria?\",\n       subtitle = \"While there are many LGAs less than one waterpoint per km sq, there is 1 LGA with 10 \\nfunctional water points per km sq.\",\n       x = \"Functional Water Point density (per km sq)\",\n       y = \"Frequency\")\n\n\n\n\n\nWe can repeat the same for non-functional water points.\n\n\nShow the code\nnigeria <- nigeria %>%\n  mutate(`wpt_nonfunc_density` = (`wpt_nonfunctional` / Area * 1000000))\n\nggplot(data=nigeria,\n       aes(x=as.numeric(`wpt_nonfunc_density`))) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill = \"orange\") + \n  labs(title = \"Are non-functional water points evenly distributed in Nigeria?\",\n       subtitle = \"It would be good to know that most areas have less than one non-functional water point \\nper km sq.\",\n       x = \"Non-Functional Water Point density (per km sq)\",\n       y = \"Frequency\")"
  },
  {
    "objectID": "Exercises/Take-home_Ex1/Take-home_Ex1.html#distribution-of-water-points-in-nigeria",
    "href": "Exercises/Take-home_Ex1/Take-home_Ex1.html#distribution-of-water-points-in-nigeria",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.2 Distribution of water points in Nigeria",
    "text": "4.2 Distribution of water points in Nigeria\nThere are 94,979 water points in Nigeria. This can be calculated in the code chunk below.\n\n\nShow the code\nsum(nigeria$wpt_total)\n\n\n[1] 94979\n\n\nLet’s find out the distribution of the various functional status of water points in Nigeria and use ggplot2 to visualise.\n\n\nShow the code\nnigeria %>%\n  pivot_longer(c(wpt_functional, wpt_nonfunctional,wpt_unknown),\n               names_to = \"status\", values_to = \"count\") %>%\n  count(status, wt = count) %>%\n  ggplot(aes(status)) + geom_bar(aes(weight = n))\n\n\n\n\n\nAs we can see in the figure above, more than half of the water points are functional, slightly more than a third are non-functional with the remaining unknown.\nIn the code chuck below, we will use tmap to plot the spatial distribution of water points of different categories. We will use tmap_arrange() to show the plots together.\nBefore this, we will create a helper function that will help us to plot the choropleths with ease.\n\n\nShow the code\n# input: the dataframe and the variable name, chart style, title \nchoropleth_plot <- function(df, varname, style, title) {\n  tm_shape(df) +\n    tm_fill(varname, \n          n= 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 1,\n              main.title.position = \"center\",\n              legend.height = 0.45, \n              legend.width = 0.35,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\nHere, we will plot the distributions of all, unknown, functional and non-functional water points.\n\n\nShow the code\ntmap_mode(\"plot\")\ntmap_arrange(\nchoropleth_plot(nigeria, \"wpt_total\", \"pretty\", \"All water points in Nigeria: \\npartitioned by 'pretty' intervals\"),\nchoropleth_plot(nigeria, \"wpt_unknown\", \"pretty\", \"Status unknown water points in Nigeria: \\n partitioned by 'pretty' intervals\"),\nchoropleth_plot(nigeria, \"wpt_functional\", \"pretty\", \"Functional water points in Nigeria: \\n partitioned by 'pretty' intervals\"),\nchoropleth_plot(nigeria, \"wpt_nonfunctional\", \"pretty\", \"Non-functional water points in Nigeria: \\n partitioned by 'pretty' intervals\"))\n\n\n\n\n\nThe choropleths above are partitioned using the default or ‘pretty’ intervals. We can observe that the number of water points (total) are not evenly spread across evenly–we see mostly lighter shades of orange and certain areas with darker orange. Water points with status unknown are more common in the southern part of the map as compared to the northern parts of Nigeria. In terms of functional water points, we can see areas in the top middle of the map are in darker shades of orange which indicates a higher number of functional water points compared to other areas. For non-functional water points, we see that the outer regions of the maps have lesser non-functional water points. Moving towards the center of the map, we see more non-functional water points. Note that this may be because of the total of water points in the area. For instance, if there is a small number (e.g., <10) of water points in an area and the worse case scenario is that all are non-functional. Compared to an area with >50 water points, having 10 non-functioning water points is only 20% of its supply source.\nLet’s try to plot the same charts, this time, using the quantile partitioning method.\n\n\nShow the code\ntmap_mode(\"plot\")\ntmap_arrange(\nchoropleth_plot(nigeria, \"wpt_total\", \"quantile\", \"All water points in Nigeria: \\npartitioned by 'quantile' intervals\"),\nchoropleth_plot(nigeria, \"wpt_unknown\", \"quantile\", \"Status unknown water points in Nigeria: \\n partitioned by 'quantile' intervals\"),\nchoropleth_plot(nigeria, \"wpt_functional\", \"quantile\", \"Functional water points in Nigeria: \\n partitioned by 'quantile' intervals\"),\nchoropleth_plot(nigeria, \"wpt_nonfunctional\", \"quantile\", \"Non-functional water points in Nigeria: \\n partitioned by 'quantile' intervals\"))\n\n\n\n\n\nThe quantile partitioning method creates intervals with an equal number of features i.e., polygons. We can make different observations using this map. When looking at total water points, we can see that north eastern areas and south western areas have relatively less water points as compared to the other areas. This pattern is also seen in the functional water points and non-functional water points choropleth maps. We can see that the northern parts of Nigeria have relatively higher number of functional water points, and relatively lesser non-functional water points as compared to other areas. As we can see in the above, plotting the graphs in “quantiles” gives us a better sense of relative levels of water points as compared to the “pretty” method.\nWe can also plot our choropleths using its proportions.\n\n\nShow the code\n#Repeat plot with the prportions\ntmap_mode(\"plot\")\ntmap_arrange(\nchoropleth_plot(nigeria, \"pct_functional\", \"pretty\", \"Proportion of Functional water points \\nin Nigeria: partitioned by 'pretty' intervals\"),\nchoropleth_plot(nigeria, \"pct_nonfunctional\", \"pretty\", \"Proportion of Non-functional water points \\nin Nigeria: partitioned by 'pretty' intervals\"))\n\n\n\n\n\nThe above two maps are plotted in the same scale (refer to the legend) which makes it easy for comparison between the two. The top 1/3 of the maps seem to have a higher proportion of functional water points than non-functional. The bottom 1/3 of the maps seem to have a slightly higher proportional of non-functional water points than functional ones.\nWe can also see that there is somewhat an inverse relationship when the proportion is >0.60. This means that the darker areas in one map would likely show up as light areas in the other. For instance, the top of the functional water points maps is in darker shades of orange while the same areas are in lighter shades in the non-functional water points map. We say that it is ‘likely’ the case because there are areas with status unknown water points as well."
  },
  {
    "objectID": "Exercises/Take-home_Ex1/Take-home_Ex1.html#global-spatial-autocorrelation",
    "href": "Exercises/Take-home_Ex1/Take-home_Ex1.html#global-spatial-autocorrelation",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "5.1 Global Spatial Autocorrelation",
    "text": "5.1 Global Spatial Autocorrelation\nAccording to Tobler’s First Law of Geography, “everything is related to everything else, but near things are more related than distant things.”\nThis sub-section will cover the computation of global spatial autocorrelation statistics and spatial complete randomness test for global spatial autocorrelation. The goal of these analyses is to understand whether water points are evenly distributed across Nigeria.\n\n5.1.1 Spatial Weights Matrix\nTo compute global spatial autocorrelation, we first need to construct spatial weights of the Nigeria. Spatial relationships are multi-directional and multi-lateral (Ref: Compulsory Reading). We can use Spatial Weights to define spatial neighbourhood for subsequent spatial analysis. There are two commonly used methods of spatial weights: contiguity-based and distanced-based.\nIn contiguity-based, neighbours share a common boundary which is considered differently in different methods. In Rook contiguity, neighbours have a common edge. In Queen contiguity, neighbours need to only share a common vertex or edge. So in comparison, Queen contiguity is more encompassing as compared to Rook contiguity7.\nThe differences between the two is illustrated in the picture below.\n\n\n\nContiguity Matrix\n\n\nIn distance-based contiguity, we have fixed weighting and adaptive weighting schemes. The former considers two regions are neighbours if they are within a specified distance from one another. In the latter scheme, each region will have the same number of neighbours. The number of neighbour is specified beforehand. If k = 8 neighbours, it classifies the nearest 8 regions as neighbours.\nWhich method of spatial weights method to use depends on the geographical location we are working with. If the geographical location consists of many isolated islands, then contiguity-based matrix may yield many regions with no neighbours. If the sizes of the features (polygons) are wide ranging where you have very large features and relatively smaller features, then contiguity-based matrix may also result in larger features having many more neighbours which may skew the results–there would be a smoothing effect to the larger number of neighbours.\n\n\n5.1.2 Contiguity-based Spatial Weights\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. By default, Queen contiguity is applied.\n\n5.1.2.1 Contiguity-based (Queen) Spatial Weight Contiguity\n\n\nShow the code\nwm_q <- poly2nb(nigeria, \n                queen = TRUE)\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 4348 \nPercentage nonzero weights: 0.750793 \nAverage number of links: 5.713535 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  4  16  57 122 177 137 121  71  39  11   4   1   1 \n4 least connected regions:\n136 497 513 547 with 1 link\n1 most connected region:\n496 with 14 links\n\n\nThe summary report above shows that there are 761 area units in Nigeria. The most connected region has 14 links. There are four least connected regions with only one neighbour.\n\n\n5.1.2.2 Contiguity-based (Rook) Spatial Weight Contiguity\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. We specify queen = FALSE to compute Rook contiguity.\n\n\nShow the code\nwm_r <- poly2nb(nigeria, \n                queen = FALSE)\nsummary(wm_r)\n\n\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 4328 \nPercentage nonzero weights: 0.7473395 \nAverage number of links: 5.687254 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  4  16  59 124 176 138 123  65  40  10   4   1   1 \n4 least connected regions:\n136 497 513 547 with 1 link\n1 most connected region:\n496 with 14 links\n\n\nThe summary report above shows that there are 751 area units in Nigeria. The most connected region has 14 links. There are four least connected regions with only one neighbour.\nA summary of the results are below. In our case, both methods yield similar results.\n\n\n\n\nQueen Contiguity\nRook Contiguity\n\n\n\n\nNo. of regions with no links\n0\n0\n\n\nAverage number of links\n5.71\n5.69\n\n\n\n\n\n\n5.1.3 Distance-based Contiguity Weight Matrix\nWe will derive the distance-based weight matrices by using dnearneigh() of spdep package. The function identifies neighbours of region points by Euclidean distance with a distance band with lower and upper bounds controlled by the bounds argument or by Great Circle distance in kilometres if longlat argument is set to TRUE\n\n5.1.3.1 Fixed Distance Weight Matrix\nDetermining the cut-off distance\nTo ensure that each region has at least one neighbour, we need to find out the minimum distance within which all regions have at least one neighbour. We can do this by following these steps:\n\nGetting the coordinates of polygon centroids. This is required as an input in the next step.\nWe need to associate each polygon with a point and its coordinates need to be in a separate data frame. We will use a mapping function that applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of nigeria. Our function will be st_centroid(). We will be using map_dbl() variation of map from the purrr package. purrr is loaded when we load tidyverse package.\nTo get our longitude values we map the st_centroid() function over the geometry column of nigeria and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n\nShow the code\nlongitude <- map_dbl(nigeria$geometry, ~st_centroid(.x)[[1]])\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]]\n\n\nShow the code\nlatitude <- map_dbl(nigeria$geometry, ~st_centroid(.x)[[2]])\n\n\nNow that we have latitude and longitude, I used cbind to put longitude and latitude into the same object. We should check the first few observations to see if things are formatted correctly.\n\n\nShow the code\ncoords <- cbind(longitude, latitude)\nhead(coords, 5)\n\n\n     longitude latitude\n[1,]  549364.0 123694.9\n[2,]  547123.4 120376.5\n[3,]  489057.4 534262.6\n[4,]  593718.2 113824.1\n[5,]  642618.7 251222.3\n\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n\nShow the code\nk1 <- knn2nb(knearneigh(coords, k = 1))\nk1dists <- unlist(nbdists(k1, coords))\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2669   12808   20008   21804   27013   72139 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 72,139 metres, so using a number slightly larger than this (i.e. 72,200) as the upper threshold gives certainty that all regions will have at least one neighbour.\nUsing the code chunk below, we discover that the region with the maximum distance to its nearest neighbour is Sardauna.\n\n\nShow the code\nnigeria$LGA[match(max(k1dists), k1dists)]\n\n\n[1] \"Sardauna\"\n\n\nComputing the fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown below.\n\n\nShow the code\nwm_d72 <- dnearneigh(coords,0,72200)\nwm_d72\n\n\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 18050 \nPercentage nonzero weights: 3.116793 \nAverage number of links: 23.71879 \n\n\nFrom the output, we see that the average number of links is 23.7. The number is quite high and may skew the analysis.\nNext, we will use str() to display the content of wm_d72 weight matrix.\n\n\nShow the code\nstr(wm_d72)\n\n\nList of 761\n $ : int [1:63] 2 4 9 24 54 65 67 101 120 179 ...\n $ : int [1:62] 1 4 9 24 54 65 67 101 120 179 ...\n $ : int [1:10] 11 19 252 257 438 445 457 628 677 682\n $ : int [1:56] 1 2 54 65 102 134 135 167 182 200 ...\n $ : int [1:21] 8 13 17 18 55 168 215 216 324 331 ...\n $ : int [1:19] 7 14 21 174 175 212 275 276 277 289 ...\n $ : int [1:32] 6 14 21 48 174 175 212 269 270 271 ...\n $ : int [1:26] 5 17 18 55 65 76 101 102 215 216 ...\n $ : int [1:64] 1 2 22 24 65 101 179 188 189 201 ...\n $ : int [1:22] 25 26 42 67 124 155 188 189 202 330 ...\n $ : int [1:11] 3 133 252 257 394 409 421 438 445 677 ...\n $ : int [1:13] 30 36 37 39 92 209 314 387 428 462 ...\n $ : int [1:24] 5 168 191 192 193 215 303 304 305 356 ...\n $ : int [1:27] 6 7 21 31 48 50 61 81 174 175 ...\n $ : int [1:37] 29 37 38 40 43 44 69 70 118 122 ...\n $ : int [1:34] 27 28 34 71 170 171 176 177 180 269 ...\n $ : int [1:30] 5 8 18 55 65 76 101 102 215 216 ...\n $ : int [1:42] 5 8 17 24 55 65 76 101 102 179 ...\n $ : int [1:7] 3 104 237 257 411 445 457\n $ : int [1:9] 59 60 160 263 474 508 565 583 613\n $ : int [1:31] 6 7 14 31 48 50 61 81 174 175 ...\n $ : int [1:64] 9 24 51 52 53 55 57 76 77 78 ...\n $ : int [1:5] 121 466 514 660 748\n $ : int [1:68] 1 2 9 18 22 53 55 65 76 101 ...\n $ : int [1:30] 10 26 42 67 155 188 189 202 330 364 ...\n $ : int [1:24] 10 25 42 67 155 189 202 330 364 365 ...\n $ : int [1:43] 16 28 34 69 70 122 170 171 176 177 ...\n $ : int [1:45] 16 27 34 69 70 122 170 171 176 177 ...\n $ : int [1:30] 15 37 38 39 40 43 44 173 183 184 ...\n $ : int [1:13] 12 36 92 156 208 209 210 283 302 548 ...\n $ : int [1:28] 14 21 48 50 61 81 175 194 205 212 ...\n $ : int [1:29] 46 109 128 140 143 153 164 217 225 231 ...\n $ : int [1:10] 41 102 134 135 211 369 540 546 720 744\n $ : int [1:33] 16 27 28 71 170 171 176 177 180 269 ...\n $ : int [1:8] 49 105 244 400 424 446 668 746\n $ : int [1:21] 12 30 37 38 39 40 184 190 195 196 ...\n $ : int [1:25] 12 15 29 36 38 39 40 43 184 190 ...\n $ : int [1:27] 15 29 36 37 39 40 43 183 184 190 ...\n $ : int [1:21] 12 29 36 37 38 40 43 184 190 209 ...\n $ : int [1:22] 15 29 36 37 38 39 43 44 184 190 ...\n $ : int [1:19] 33 134 135 182 200 279 280 369 488 525 ...\n $ : int [1:19] 10 25 26 67 120 124 155 188 189 243 ...\n $ : int [1:27] 15 29 37 38 39 40 44 69 173 184 ...\n $ : int [1:27] 15 29 40 43 69 173 185 186 190 284 ...\n $ : int [1:12] 117 374 381 409 415 421 430 450 509 643 ...\n $ : int [1:24] 32 109 125 128 153 164 225 232 236 239 ...\n $ : int [1:12] 63 64 73 111 129 259 380 399 420 472 ...\n $ : int [1:30] 7 14 21 31 50 61 81 174 175 205 ...\n $ : int [1:4] 35 105 401 424\n $ : int [1:27] 14 21 31 48 61 81 175 205 212 278 ...\n $ : int [1:47] 22 52 53 56 57 76 77 78 79 163 ...\n $ : int [1:37] 22 51 53 56 57 77 78 79 163 187 ...\n $ : int [1:58] 22 24 51 52 55 56 57 76 77 78 ...\n $ : int [1:33] 1 2 4 67 120 155 167 182 188 206 ...\n $ : int [1:51] 5 8 17 18 22 24 53 65 76 77 ...\n $ : int [1:35] 51 52 53 57 77 78 79 163 187 195 ...\n $ : int [1:37] 22 51 52 53 56 77 78 163 187 195 ...\n $ : int [1:5] 126 127 482 687 735\n $ : int [1:14] 20 60 156 263 304 305 548 550 565 576 ...\n $ : int [1:11] 20 59 160 262 263 474 565 576 579 583 ...\n $ : int [1:28] 14 21 31 48 50 81 175 194 205 212 ...\n $ : int [1:5] 378 408 458 752 759\n $ : int [1:7] 47 64 73 111 129 259 399\n $ : int [1:11] 47 63 73 107 111 259 380 399 670 688 ...\n $ : int [1:47] 1 2 4 8 9 17 18 24 55 101 ...\n $ : int [1:26] 71 118 122 177 180 298 299 333 340 341 ...\n $ : int [1:30] 1 2 10 25 26 42 54 120 155 188 ...\n $ : int [1:7] 138 144 245 268 489 500 501\n $ : int [1:44] 15 27 28 43 44 70 118 122 170 171 ...\n $ : int [1:50] 15 27 28 69 118 122 170 171 173 176 ...\n $ : int [1:20] 16 34 66 180 342 355 368 372 397 553 ...\n $ : int [1:6] 355 368 371 397 652 653\n $ : int [1:14] 47 63 64 107 111 114 247 259 659 670 ...\n $ : int [1:15] 108 227 250 253 266 367 376 392 414 425 ...\n $ : int [1:9] 249 281 419 450 461 534 634 664 738\n $ : int [1:56] 8 17 18 22 24 51 53 55 77 78 ...\n $ : int [1:51] 22 51 52 53 55 56 57 76 78 79 ...\n $ : int [1:57] 22 51 52 53 55 56 57 76 77 79 ...\n $ : int [1:39] 22 51 52 53 56 76 77 78 163 187 ...\n $ : int [1:19] 97 143 225 231 239 250 264 418 440 473 ...\n $ : int [1:21] 14 21 31 48 50 61 175 205 212 291 ...\n $ : int [1:6] 130 253 377 406 516 754\n $ : int [1:3] 146 429 679\n $ : int [1:38] 99 103 128 140 143 153 154 217 233 239 ...\n $ : int [1:19] 145 147 149 219 224 242 261 393 402 407 ...\n $ : int [1:5] 148 479 635 687 701\n $ : int [1:11] 98 105 157 255 400 454 529 661 663 668 ...\n $ : int 235\n $ : int [1:2] 158 265\n $ : int [1:11] 93 117 384 385 386 415 477 629 643 655 ...\n $ : int [1:3] 348 594 652\n $ : int [1:7] 12 30 156 428 548 583 696\n $ : int [1:10] 90 384 385 386 398 415 460 643 695 757\n $ : int [1:17] 95 106 137 165 166 344 383 396 404 412 ...\n $ : int [1:13] 94 106 112 137 145 166 383 396 412 442 ...\n $ : int [1:4] 151 229 424 683\n $ : int [1:18] 80 143 152 165 225 231 250 264 418 440 ...\n $ : int [1:12] 87 113 222 244 248 255 267 400 446 449 ...\n $ : int [1:35] 84 128 140 153 154 217 232 233 258 261 ...\n  [list output truncated]\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:761] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 72200)\n - attr(*, \"dnn\")= num [1:2] 0 72200\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nWe can observe that each region has varying number of neighbours.\n\n\nShow the code\npar(mfrow = c(1,2))\nplot(nigeria$geometry, border = \"lightgrey\",main=\"1st nearest neighbours\" )\nplot(k1, coords, add = TRUE, col = \"red\", length = 0.88, )\n\nplot(nigeria$geometry, border = \"lightgrey\", main = \"Distance Link\")\nplot(wm_d72, coords, add = TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\nDue to a high number of links, we have very dense graphs which make it difficult to interpret. However, we can still make some observations:\n\nThe above charts actually illustrates a characteristic of fixed distance weight matrix–more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours.\nBased on the above charts, we can tell that the geographical areas of the regions in Nigeria are largely varying. In the top and bottom of the charts, we see the neighbour links are very dense and less dense in the western and eastern regions (where you can see pockets of white space).\n\n\n\n5.1.3.2 Adaptive Distance-based Weight Matrix\nTo overcome the issue of fixed distance weight matrix where there is uneven distribution of neighbours, we can use directly control the numbers of neighbours using k-nearest neighbours, as shown in the code chunk below.\nAs a rule-of-thumb, we will set k = 8 i.e., all regions will have 8 neighbours.\n\n\nShow the code\nknn8 <- knn2nb(knearneigh(coords, k=8))\nknn8\n\n\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 6088 \nPercentage nonzero weights: 1.051248 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nPlotting Adaptive Distance-based Neighbours\n\n\nShow the code\npar(mfrow = c(1,2))\nplot(nigeria$geometry, border = \"lightgrey\",main=\"8 nearest neighbours\" )\nplot(knn8, coords, add = TRUE, col = \"red\", length = 0.88, )\n\nplot(nigeria$geometry, border = \"lightgrey\", main = \"Distance Link w KNN\")\nplot(knn8, coords, add = TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n5.1.4 Which spatial weight matrix to use?\nSelecting a spatial weight matrix is use is dependent on the geographical area of interest and the focus of the study8. In our case, between contiguity-based and distance-based spatial weight matrices, we lean towards distance-based matrices. Within distance-based matrices, we will select the adaptive distance-based spatial weight matrix for our subsequent analysis.\nThe reasons are summarised here:\n\nNigeria has 761 LGAs with varying sizes. Hence, a contiguity-based matrix will have the issue where larger LGAs have more neighbours and smaller LGAs have lesser neighbours. This would likely skew our analysis. Therefore, distance-based methods are preferred.\nAs mentioned earlier, the fixed distance-based method has the disadvantage that some regions would only have 1 neighbour, while on average regions have 23 neighbours. Statistical test for regions with only 1 neighbour may not be valid.\n\nBased on the above, we will select adaptive distance-based spatial weight matrix.\n\n\n5.1.5 Row-Standardised Weights Matrix\nAfter selecting the weight matrix to use, we will now assign weights to each neighboring polygon. Each neighboring polygon will be assigned equal weight (style=“W”) by assigning the fraction 1/(#of neighbors) to each neighbouring area. This is also known as a row-standardised matrix where each row in the matrix sums to 1.\n\n\nShow the code\nrswm_knn8 <- nb2listw(knn8,\n                   style = \"W\",\n                   zero.policy = TRUE)\nrswm_knn8\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 6088 \nPercentage nonzero weights: 1.051248 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 761 579121 761 171.0938 3102.562\n\n\nWe will be using the row-standardised weight matrix for the next part of the analysis.\n\n\n5.1.6 Computing Global Spatial Autocorrelation Statistics\nThis in sub-section, we will use two methods: Moran’s I and Geary’s C to test the hypothesis the following hypothesis:\n\nH0: Observed spatial patterns of values is equally likely as any other spatial pattern i.e. data is randomly disbursed, no spatial pattern\nH1: Data is more spatially clustered than expected by chance alone.\n\n\n5.1.6.1 Moran’s I\nWe will perform Moran’s I statistical testing by using moran.test() of spdep. Moran’s I describe how features differ from the values in the study area as a whole. The Moran I statistic ranges from -1 to 1. If the Moran I is:\n\npositive (I>0): Clustered, observations tend to be similar\nnegative (I<0): Disperse, observations tend to be dissimilar\napproximately zero: observations arranged randomly over space\n\nThe below code chunk will perform the Moran’s I test on both functional and non-functional water points.\n\n\nShow the code\nmoran.test(nigeria$pct_functional,\n           listw = rswm_knn8,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n\n    Moran I test under randomisation\n\ndata:  nigeria$pct_functional  \nweights: rswm_knn8    \n\nMoran I statistic standard deviate = 30.692, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.523237285      -0.001315789       0.000292099 \n\n\n\n\nShow the code\nmoran.test(nigeria$pct_nonfunctional,\n           listw = rswm_knn8,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n\n    Moran I test under randomisation\n\ndata:  nigeria$pct_nonfunctional  \nweights: rswm_knn8    \n\nMoran I statistic standard deviate = 26.388, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4496039329     -0.0013157895      0.0002919996 \n\n\nIn both cases, since the p-value < 0.05, we have sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This means that data is more spatially clustered than expected by chance alone. Since Moran I statistics are larger than 0, the observation are clustered, observations tend to be similar.\nComputing Monte Carlo Moran’s I\nIf we have doubts that the assumptions of Moran’s I are true (normality and randomisation), we can use a Monte Carlo simulation to perform a permutation test for Moran’s I.\nThe permutation tests consists of randomly reassigning the attribute values to a cell under the assumption of no spatial pattern. This random assignment is conducted n times. Each time, we will compute the Moran’s I to creating an empirical distribution of Moran’s I under H0.\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\n\nShow the code\nset.seed(1234)\nbperm_func = moran.mc(nigeria$pct_functional, \n         listw = rswm_knn8,\n         nsim = 999,\n         zero.policy = TRUE,\n         na.action = na.omit)\nbperm_func\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nigeria$pct_functional \nweights: rswm_knn8  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.52324, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nShow the code\nset.seed(1234)\nbperm_nonfunc = moran.mc(nigeria$pct_nonfunctional, \n         listw = rswm_knn8,\n         nsim = 999,\n         zero.policy = TRUE,\n         na.action = na.omit)\nbperm_nonfunc\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nigeria$pct_nonfunctional \nweights: rswm_knn8  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.4496, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nIn both cases, since the pseudo p-value is < 0.05, we have sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This means that data is more spatially clustered than expected by chance alone for both functional and non-functional water points.\nVisualising Monte Carlo Moran’s I\nWe can examine the simulated Moran’s I test statistics in greater detail through plotting the distribution of the statistical values as a histogram by using the code chunks below.\nLet’s visualise Monte Carlo Moran’s I using a histogram. This can be created by using ggplot2 package.\n\n\nShow the code\ndf <- as.data.frame(bperm_func$res)\ncolnames(df) <- c(\"Simulated Moran's I\")\n\nmoran_mc_func <- ggplot(df, aes(x=`Simulated Moran's I`)) + \n  geom_histogram(color = \"black\", fill = \"grey\", bins = 25) +\n  xlim(-0.1,0.6) + \n  ylab('Frequency') + \n  geom_vline(xintercept = 0, color = 'red') +\n  geom_vline(xintercept = 0.523 , color = 'blue') + \n  ggtitle(\"Histogram of Monte Carlo Simulated \\nMoran's I (Functional WP)\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5)) +\n  annotate(\"text\", x = 0.35, y = 410, label = \"Actual Moran's I\", color = 'blue') \n\ndf <- as.data.frame(bperm_nonfunc$res)\ncolnames(df) <- c(\"Simulated Moran's I\")\n\nmoran_mc_nonfunc <- ggplot(df, aes(x=`Simulated Moran's I`)) + \n  geom_histogram(color = \"black\", fill = \"grey\", bins = 25) +\n  xlim(-0.1,0.6) + \n  ylab('Frequency') + \n  geom_vline(xintercept = 0, color = 'red') +\n  geom_vline(xintercept = 0.450 , color = 'blue') + \n  ggtitle(\"Histogram of Monte Carlo Simulated \\nMoran's I (Non-Functional WP)\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5)) +\n  annotate(\"text\", x = 0.28, y = 410, label = \"Actual Moran's I\", color = 'blue') \n\nmoran_mc_func + moran_mc_nonfunc\n\n\n\n\n\nIn both cases, the actual Moran’s I value (blue line) is near the extremes of the distribution of the simulated data. This suggests a statistically significant relationship and evidence of positive autocorrelation i.e. cluster9.\n\n\n5.1.6.2 Geary’s C\nGeary’s C considers the difference between respective observations10--this means that it describe how features differ from their immediate neighbours. Geary’s C range from -1 to an undefined number above 1. If the Geary’s C is:\n\nLarge (c>1): Dispersed, observations tend to be dissimilar\nSmall (c<1): Clustered, observations tend to be similar\nc = 1: observations arranged randomly over space\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation for functional and non-functional water points using geary.test() of spdep.\n\n\nShow the code\ngeary.test(nigeria$pct_functional, listw = rswm_knn8)\n\n\n\n    Geary C test under randomisation\n\ndata:  nigeria$pct_functional \nweights: rswm_knn8 \n\nGeary C statistic standard deviate = 29.377, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.470163795       1.000000000       0.000325287 \n\n\n\n\nShow the code\ngeary.test(nigeria$pct_nonfunctional, listw = rswm_knn8)\n\n\n\n    Geary C test under randomisation\n\ndata:  nigeria$pct_nonfunctional \nweights: rswm_knn8 \n\nGeary C statistic standard deviate = 25.29, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.5393883718      1.0000000000      0.0003317272 \n\n\nIn both cases, since the p-value < 0.05, we have sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This means that data is more spatially clustered than expected by chance alone. The Geary C statistics are less than 1 suggesting that clusters are present in both cases. This finding is consistent with the results of the Global Moran’s I test in the previous section.\nComputing Monte Carlo Geary’s C\nSimilar to Moran’s I, we can also use Monte Carlo simulation to perform a permutation test for Geary’s C. The code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep. A total of 1000 simulation will be performed.\n\n\nShow the code\nset.seed(1234)\nbperm_func = geary.mc(nigeria$pct_functional,\n                 listw = rswm_knn8,\n                 nsim = 999)\nbperm_func\n\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nigeria$pct_functional \nweights: rswm_knn8 \nnumber of simulations + 1: 1000 \n\nstatistic = 0.47016, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nShow the code\nset.seed(1234)\nbperm_nonfunc = geary.mc(nigeria$pct_nonfunctional,\n                 listw = rswm_knn8,\n                 nsim = 999)\nbperm_nonfunc\n\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nigeria$pct_nonfunctional \nweights: rswm_knn8 \nnumber of simulations + 1: 1000 \n\nstatistic = 0.53939, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nSince the pseudo p-value = 0.001 < 0.05, we have sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This means that data is more spatially clustered than expected by chance alone.\nVisualising the Monte Carlo Geary’s C\nWe can examine the simulated Geary’s C test statistics in greater detail through plotting the distribution of the statistical values as a histogram by using the code chunks below. This can be created by using ggplot2 package.\n\n\nShow the code\ndf <- as.data.frame(bperm_func$res)\ncolnames(df) <- c(\"Simulated Geary's C\")\n\ngeary_mc_func <- ggplot(df, aes(x=`Simulated Geary's C`)) + \n  geom_histogram(color = \"black\", fill = \"grey\", bins = 25) +\n  xlim(0.4,1.2) + \n  ylab('Frequency') + \n  geom_vline(xintercept = 0, color = 'red') +\n  geom_vline(xintercept = 0.470 , color = 'blue') + \n  ggtitle(\"Histogram of Monte Carlo Simulated \\nGeary's C (Non-Functional WP)\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5)) +\n  annotate(\"text\", x = 0.30, y = 410, label = \"Actual Geary's C\", color = 'blue') \n\n\ndf <- as.data.frame(bperm_nonfunc$res)\ncolnames(df) <- c(\"Simulated Geary's C\")\n\ngeary_mc_nonfunc <- ggplot(df, aes(x=`Simulated Geary's C`)) + \n  geom_histogram(color = \"black\", fill = \"grey\", bins = 25) +\n  xlim(0.4,1.2) + \n  ylab('Frequency') + \n  geom_vline(xintercept = 0, color = 'red') +\n  geom_vline(xintercept = 0.540 , color = 'blue') + \n  ggtitle(\"Histogram of Monte Carlo Simulated \\nGeary's C (Non-Functional WP)\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5)) +\n  annotate(\"text\", x = 0.37, y = 410, label = \"Actual Geary's C\", color = 'blue') \n\ngeary_mc_func + geary_mc_nonfunc\n\n\n\n\n\nIn both cases, the actual Geary’s C value (blue line) is near the extremes of the distribution of the simulated data. This suggests a statistically significant relationship and evidence of positive autocorrelation i.e. cluster.\n\n\n\n5.1.7 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.\nIn spatial correlograms, the number of bins determines the distance range of each bin. The range is the maximum distance divided by the number of bins11.\n\n5.1.7.1 Moran’s I Correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 8-lag spatial correlogram for Moran’s I and the autocorrelation coefficient. The plot() of base Graph is then used to plot the output.\n\n\nShow the code\nmoran_corr_func <- sp.correlogram(knn8, #non-weighted spatial weights\n                          nigeria$pct_functional,\n                          order = 8,\n                          method = 'I', #Moran's I\n                          style = 'W') #weighed\nplot(moran_corr_func)\n\n\n\n\n\n\n\nShow the code\nmoran_corr_nonfunc <- sp.correlogram(knn8, #non-weighted spatial weights\n                          nigeria$pct_nonfunctional,\n                          order = 8,\n                          method = 'I', #Moran's I\n                          style = 'W') #weighed\nplot(moran_corr_nonfunc)\n\n\n\n\n\nWe can use the following code chunk if we are interested to find out the distance range of each bin / lag.\n\n\nShow the code\nnb8 <- nblag(knn8, 8)\ncorrelogram_bins <- sapply(nb8, \n                           function(x) mean(unlist(nbdists(x, coords))))\ncorrelogram_bins\n\n\n[1]  37386.50  73925.69 112081.23 152528.12 194617.08 238153.84 283553.45\n[8] 329774.69\n\n\nNext, let’s examine the full analysis report and view which values are statistically significant.\n\n\nShow the code\nprint(moran_corr_func)\n\n\nSpatial correlogram for nigeria$pct_functional \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (761)  5.2324e-01 -1.3158e-03  2.9210e-04           30.692       < 2.2e-16\n2 (761)  4.3338e-01 -1.3158e-03  1.4782e-04           35.754       < 2.2e-16\n3 (761)  3.6793e-01 -1.3158e-03  1.0116e-04           36.713       < 2.2e-16\n4 (761)  3.2705e-01 -1.3158e-03  7.5025e-05           37.910       < 2.2e-16\n5 (761)  2.8922e-01 -1.3158e-03  5.8720e-05           37.914       < 2.2e-16\n6 (761)  2.4635e-01 -1.3158e-03  4.8735e-05           35.478       < 2.2e-16\n7 (761)  2.0785e-01 -1.3158e-03  4.2396e-05           32.124       < 2.2e-16\n8 (761)  1.7834e-01 -1.3158e-03  3.7887e-05           29.188       < 2.2e-16\n           \n1 (761) ***\n2 (761) ***\n3 (761) ***\n4 (761) ***\n5 (761) ***\n6 (761) ***\n7 (761) ***\n8 (761) ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nShow the code\nprint(moran_corr_nonfunc)\n\n\nSpatial correlogram for nigeria$pct_nonfunctional \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (761)  4.4960e-01 -1.3158e-03  2.9200e-04          26.3881       < 2.2e-16\n2 (761)  3.1842e-01 -1.3158e-03  1.4777e-04          26.3026       < 2.2e-16\n3 (761)  2.3165e-01 -1.3158e-03  1.0112e-04          23.1671       < 2.2e-16\n4 (761)  1.5268e-01 -1.3158e-03  7.5000e-05          17.7818       < 2.2e-16\n5 (761)  7.5056e-02 -1.3158e-03  5.8701e-05           9.9681       < 2.2e-16\n6 (761)  3.9018e-02 -1.3158e-03  4.8719e-05           5.7786       7.532e-09\n7 (761)  3.1312e-02 -1.3158e-03  4.2382e-05           5.0118       5.393e-07\n8 (761)  2.2785e-02 -1.3158e-03  3.7874e-05           3.9161       8.997e-05\n           \n1 (761) ***\n2 (761) ***\n3 (761) ***\n4 (761) ***\n5 (761) ***\n6 (761) ***\n7 (761) ***\n8 (761) ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nFrom the output, we see that all results in both cases are statistically significant at the 95% level of confidence. The correlogram depicts how the spatial autocorrelation changes with distance. From the chart, we can see that Moran’s I decreases when spatial lag increases. This means that there is a quite strong spatial autocorrelation that decreases as spatial lag increases.\nComparing functional and non-functional water points, we can see that in the latter, from lag-5 onwards, the spatial autocorrelation < 0.1 and nears 0. In the case of functional water points, the Moran’s I value at lag 5 is around 0.3.\n\n\n5.1.7.2 Geary’s C Correlogram\nSimilarly, we can do the same for Geary’s C.\n\n\nShow the code\ngeary_corr_func <- sp.correlogram(knn8, #non-weighted spatial weights\n                          nigeria$pct_functional,\n                          order = 8,\n                          method = 'C', #Geary's C\n                          style = 'W') #weighed\nplot(geary_corr_func)\n\n\n\n\n\n\n\nShow the code\ngeary_corr_nonfunc <- sp.correlogram(knn8, #non-weighted spatial weights\n                          nigeria$pct_nonfunctional,\n                          order = 8,\n                          method = 'C', #Geary's C\n                          style = 'W') #weighed\nplot(geary_corr_nonfunc)\n\n\n\n\n\nLet’s use the code chunk below to print the full analysis report.\n\n\nShow the code\nprint(geary_corr_func)\n\n\nSpatial correlogram for nigeria$pct_functional \nmethod: Geary's C\n          estimate expectation   variance standard deviate Pr(I) two sided    \n1 (761) 4.7016e-01  1.0000e+00 3.2529e-04          -29.377       < 2.2e-16 ***\n2 (761) 5.7163e-01  1.0000e+00 1.9203e-04          -30.912       < 2.2e-16 ***\n3 (761) 6.3944e-01  1.0000e+00 1.5802e-04          -28.682       < 2.2e-16 ***\n4 (761) 6.7225e-01  1.0000e+00 1.2514e-04          -29.299       < 2.2e-16 ***\n5 (761) 7.1004e-01  1.0000e+00 1.0807e-04          -27.891       < 2.2e-16 ***\n6 (761) 7.3684e-01  1.0000e+00 9.8181e-05          -26.558       < 2.2e-16 ***\n7 (761) 7.6512e-01  1.0000e+00 9.8474e-05          -23.669       < 2.2e-16 ***\n8 (761) 7.8220e-01  1.0000e+00 1.0972e-04          -20.792       < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nShow the code\nprint(geary_corr_nonfunc)\n\n\nSpatial correlogram for nigeria$pct_nonfunctional \nmethod: Geary's C\n          estimate expectation   variance standard deviate Pr(I) two sided    \n1 (761) 0.53938837  1.00000000 0.00033173         -25.2897       < 2.2e-16 ***\n2 (761) 0.67620379  1.00000000 0.00020058         -22.8630       < 2.2e-16 ***\n3 (761) 0.74920671  1.00000000 0.00016899         -19.2922       < 2.2e-16 ***\n4 (761) 0.82171931  1.00000000 0.00013480         -15.3552       < 2.2e-16 ***\n5 (761) 0.89720975  1.00000000 0.00011759          -9.4791       < 2.2e-16 ***\n6 (761) 0.92911305  1.00000000 0.00010771          -6.8302       8.479e-12 ***\n7 (761) 0.95078872  1.00000000 0.00010928          -4.7075       2.507e-06 ***\n8 (761) 0.97228216  1.00000000 0.00012356          -2.4935         0.01265 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nFrom the output, we see that all results are statistically significant at the 95% level of confidence for both cases.\nThe correlogram depicts how the spatial autocorrelation changes with distance. From the chart, we can see that Geary’s C increases when spatial lag increases. This is unsurprising, given that Moran’s I and Geary’s C are inversely related. Also, all Geary C’s values are < 1 which suggests clustering.\nIn the case of non-functional water points, from Lag 5, the values are >= 0.9, nearing 1 which suggests little to no cluster or dissimilar observations. On the other hand, the values for functional water points are <= 0.8 for all lags."
  },
  {
    "objectID": "Exercises/Take-home_Ex1/Take-home_Ex1.html#local-spatial-autocorrelation-statistics",
    "href": "Exercises/Take-home_Ex1/Take-home_Ex1.html#local-spatial-autocorrelation-statistics",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "5.2 Local Spatial Autocorrelation Statistics",
    "text": "5.2 Local Spatial Autocorrelation Statistics\nIn the previous section, we have established through statistical testing that spatial clustering of non-functional water points occur in Nigeria. Now, we seek to detect clusters or outliers and discover if there are any hot or cold spots of non-functional water points using Local Spatial Autocorrelation Statistics. They include: Anselin’s Moran Scatterplot and Local Indicators of Spatial Autocorrelation (LISA) and Getis-Ord Gi Statistics.\n\n5.2.1 Cluster and Outlier Analysis\n\n5.2.1.1 Local Moran’s I\nThe Local Moran’s I is a local spatial autocorrelation statistic based on the Moran’s I statistic. It was developed by Anselin (1995) as a LISA statistic. Anselin defines LISA to have two properties:\n\n“The LISA for each observation gives an indication of the extent of significant spatial clustering of similar values around that observation”; and\n“the sum of LISAs for all observations is proportional to a global indicator of spatial association.”\n\nThe first point means that given an attribute of interest, for each region in Nigeria, the LISA indicates existence and extent of spatial clustering of regions with similar attribute values12.\nPositive Local Moran’s I value indicates that a feature has neighboring features with similarly high or low attribute values; this feature is part of a cluster. Negative Local Moran’s I value indicates that a feature has neighboring features with dissimilar values; this feature is an outlier13.\nComputing Local Moran’s I\nBefore we can map the values, we first need to compute them using the localmoran() function of spdep package. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunk below is used to compute the Local Moran’s I of percentage of functional and non-functional water points at the LGA level.\n\n\nShow the code\nfips <- order(nigeria$LGA)\nlocalMI_func <- localmoran(nigeria$pct_functional, rswm_knn8)\nhead(localMI_func)\n\n\n           Ii          E.Ii      Var.Ii       Z.Ii Pr(z != E(Ii))\n1  0.37995419 -2.159064e-04 0.020344291  2.6653649    0.007690482\n2  0.38571528 -2.312021e-04 0.021785225  2.6148457    0.008926777\n3 -0.07290031 -2.549836e-04 0.024025489 -0.4686747    0.639302139\n4  0.05542823 -1.839603e-05 0.001733752  1.3316242    0.182983719\n5  0.47953038 -5.726499e-04 0.053940028  2.0671827    0.038716939\n6  0.12006509 -3.150906e-05 0.002969563  2.2038623    0.027534029\n\n\n\n\nShow the code\nfips <- order(nigeria$LGA)\nlocalMI_nonfunc <- localmoran(nigeria$pct_nonfunctional, rswm_knn8)\nhead(localMI_nonfunc)\n\n\n          Ii          E.Ii     Var.Ii      Z.Ii Pr(z != E(Ii))\n1  0.6506454 -0.0008294518 0.07810908  2.331025    0.019752051\n2  0.5944165 -0.0005017373 0.04726386  2.736483    0.006209989\n3  0.1855012 -0.0016465926 0.15493203  0.475460    0.634459103\n4  0.8661740 -0.0007449612 0.07015857  3.272941    0.001064347\n5  0.6411397 -0.0010566011 0.09947700  2.036134    0.041736858\n6 -0.1639149 -0.0001770915 0.01668751 -1.267515    0.204971134\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\n\nShow the code\nprintCoefmat(data.frame(\n  localMI_func[fips,], \n  row.names=nigeria$LGA[fips]),\n  check.names=FALSE)\n\n\n\n\nShow the code\nprintCoefmat(data.frame(\n  localMI_nonfunc[fips,], \n  row.names=nigeria$LGA[fips]),\n  check.names=FALSE)\n\n\nMapping Local Moran’s I values and p-values\nNext, we will append the local Moran’s I dataframe (i.e. localMI_func and localMI_nonfunc) onto nigeria SpatialPolygonDataFrame in preparation for the next part. This can be done using the code chunks below.\n\n\nShow the code\nnigeria.localMI_func <- cbind(nigeria,localMI_func) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\nShow the code\nnigeria.localMI_nonfunc <- cbind(nigeria,localMI_nonfunc) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\nWe must also consider the p-values for each of the Local Moran’s I values before interpreting them. Let’s visualise both the Local Moran’s I values and its p-values using the choropleth mapping functions of tmap package\n\n\nShow the code\nlocalMI_func.map <- tm_shape(nigeria.localMI_func) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          title = \"Local Moran I Statistics\") +\n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Local Moran's I Map \\n(Functional WP)\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\npvalue_func.map <- tm_shape(nigeria.localMI_func) + \n                tm_fill(col = \"Pr.Ii\",\n                       breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n                       palette = \"-Blues\",\n                       title = \"Local Moran's I p-values\") + \n                tm_borders(alpha = 0.3)+ \n  tm_layout(main.title = \"Local Moran's I p-values Map \\n(Functional WP)\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\ntmap_arrange(localMI_func.map, pvalue_func.map, asp = 1, ncol = 2)\n\n\n\n\n\n\n\nShow the code\nlocalMI_nonfunc.map <- tm_shape(nigeria.localMI_nonfunc) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          title = \"Local Moran I Statistics\") +\n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Local Moran's I Map \\n(Non-Functional WP)\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\npvalue_nonfunc.map <- tm_shape(nigeria.localMI_nonfunc) + \n                tm_fill(col = \"Pr.Ii\",\n                       breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n                       palette = \"-Blues\",\n                       title = \"Local Moran's I p-values\") + \n                tm_borders(alpha = 0.3)+ \n  tm_layout(main.title = \"Local Moran's I p-values Map \\n(Non-Functional WP)\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\ntmap_arrange(localMI_nonfunc.map, pvalue_nonfunc.map, asp = 1, ncol = 2)\n\n\n\n\n\nSomething extra that we can also do is to build a choropleth and shade only regions that are statistically significant. This can be done using the code chunk below. We first create a new object nigeria.localMI_sig_f that consists of statistically significant values for functional water points. Then we plot a base map that consists of just the polygons features. Lastly, we overlay the base map with a new map that consists of the statistically significant local Moran’s I value. We repeat this for non-functional water points.\n\n\nShow the code\n#Functional\nnigeria.localMI_sig_f <- cbind(nigeria,localMI_func) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..) %>%\n  filter(Pr.Ii < 0.05)\n\nbase <- tm_shape(nigeria) + \n  tm_fill(col = 'gray98') + \n  tm_borders(alpha = 0.3)\n\nlocalMI_sig_f.map <- base + \n  tm_shape(nigeria.localMI_sig_f) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          title = \"Local Moran I Statistics\") +\n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Local Moran's I (Sig.) Map \\n(Functional WP) \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\n#Non-Functional\nnigeria.localMI_sig_nf <- cbind(nigeria,localMI_nonfunc) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..) %>%\n  filter(Pr.Ii < 0.05)\n\nbase <- tm_shape(nigeria) + \n  tm_fill(col = 'gray98') + \n  tm_borders(alpha = 0.3)\n\nlocalMI_sig_nf.map <- base + \n  tm_shape(nigeria.localMI_sig_nf) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          title = \"Local Moran I Statistics\") +\n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Local Moran's I (Sig.) Map \\n(Non-Functional WP) \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\ntmap_arrange(localMI_sig_f.map,localMI_sig_nf.map)\n\n\n\n\n\nRecall that a positive Local Moran’s I value indicates that a feature is part of a cluster and a negative Local Moran’s I value indicates that a feature is an outlier.\nFor the functional water points map, we see most regions are in shades of green which corresponds to them being in cluster(s). This is similar for the non-functional water points map. There are areas of overlap on both maps (top) and also areas where both maps differ (bottom of the map). Later on, we will combine this analysis with LISA cluster map to derive more information.\n\n\n5.2.1.2 Anselin’s Moran Scatterplot\nThe Anselin’s Moran Scatterplot allows us to assess how similar or dissimilar an observed value is to it’s neighbouring observations. It is a visualisation tool that gives us a visual representation of spatial associations in the neighbourhood around each observation14.\nStandardising Variable\nBefore we plot the scatterplot, we can also standardise the variable first. This will result in the scatterplot to be centered on the coordinates (0,0) which may be easier to interpret.\nWe can use scale() to center and scale the variable. Centering is done by subtracting the mean from the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\nAfter running the code chunk below, a new column Z.pct_nonfunctional will be created to store the standardised values. The as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\n\n\nShow the code\nnigeria$Z.pct_functional <- scale(nigeria$pct_functional) %>%\n  as.vector\nnigeria$Z.pct_nonfunctional <- scale(nigeria$pct_nonfunctional) %>%\n  as.vector\n\nhead(nigeria,3) \n\n\nSimple feature collection with 3 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 481557.7 ymin: 116934.8 xmax: 552734.5 ymax: 579396\nProjected CRS: Minna / Nigeria West Belt\n        LGA Level                    shapeID shapeGroup shapeType\n1 Aba North  ADM2 NGA-ADM2-72505758B79815894        NGA      ADM2\n2 Aba South  ADM2 NGA-ADM2-72505758B67905963        NGA      ADM2\n3     Abaji  ADM2 NGA-ADM2-72505758B61968000        NGA      ADM2\n                        geometry wpt_functional wpt_nonfunctional wpt_unknown\n1 MULTIPOLYGON (((552560.3 12...              7                 9           1\n2 MULTIPOLYGON (((545153.6 12...             29                35           7\n3 MULTIPOLYGON (((510602.3 57...             23                34           0\n  wpt_total pct_functional pct_nonfunctional            Area   wpt_func_density\n1        17      0.4117647         0.5294118  18723031 [m^2] 0.37387109 [1/m^2]\n2        71      0.4084507         0.4929577  43383884 [m^2] 0.66845099 [1/m^2]\n3        57      0.4035088         0.5964912 832968699 [m^2] 0.02761208 [1/m^2]\n  wpt_nonfunc_density Z.pct_functional Z.pct_nonfunctional\n1  0.48069141 [1/m^2]       -0.4048126           0.7934450\n2  0.80675119 [1/m^2]       -0.4189065           0.6171056\n3  0.04081786 [1/m^2]       -0.4399237           1.1179293\n\n\nIn the output above, we can see the two new columns added.\nNow, we can plot the Moran scatterplot using the standardised values and moran.plot() of spdep.\n\n\nShow the code\nnci_func <- moran.plot(nigeria$Z.pct_functional, rswm_knn8,\n                  labels = as.character(nigeria$LGA),\n                  xlab = \"Pct Non-Functional Water Points\",\n                  ylab = \"Spatially Lag Pct Non-Functional Water Points\")\n\n\n\n\n\n\n\nShow the code\nnci_nonfunc <- moran.plot(nigeria$Z.pct_nonfunctional, rswm_knn8,\n                  labels = as.character(nigeria$LGA),\n                  xlab = \"Pct Non-Functional Water Points\",\n                  ylab = \"Spatially Lag Pct Non-Functional Water Points\")\n\n\n\n\n\nIn both cases, we will find that the output of the Moran Scatterplots to be consistent with the Moran’s I scores tabulated in the previous sub-section. The Moran scatterplot has 4 quadrants:\n\n“High-High” - Top right corner : Positive Autocorrelation Cluster. Regions here have high percentage of non-functional water points and are surrounded by other areas that have the higher than average level of non-functional water points.\n“Low-High” - Top left corner: Negative Autocorrelation Cluster. Regions here have low percentage of non-functional water points and are surrounded by other areas that have the higher than average level of non-functional water points.\n“High-Low” - Bottom right corner: Negative Autocorrelation Cluster. Regions here have high percentage of non-functional water points and are surrounded by other areas that have the lower than average level of non-functional water points.\n“Low-Low” - Bottom left corner : Positive Autocorrelation Cluster. Regions here have low percentage of non-functional water points and are surrounded by other areas that have the lower than average level of non-functional water points.\n\nUnfortunately, the Moran scatterplot does not tells us which points/regions are significant. To overcome this, we can use the LISA Cluster Maps.\n\n\n5.2.1.3 LISA Cluster Maps\nLISA Cluster Maps also categorises each region into one of five groups: (1) High-High, (2) High-Low, (3) Low-High, (4) Low-Low and (5) Insignificant.\nWe can prepare a LISA cluster map by following these steps:\n\nCreate a vector of the same length as the number of LGA in Nigeria\nDerive a variable, DV by using a by using the spatially lagged version (lag_GDPPC) of the variable of interested (GDPPC) and center it around its means. When DV > 0, the spatially lagged variable of the region is higher than the mean.\nDerive a variable, L_MI using the Local Moran’s I.\nSet the significance level for the local Moran.\nDefine the command lines for: high-high, low-low, low-high, high-low\nPlace statistically insignificant Moran I in the category 0.\n\n\n\nShow the code\n#Step 1\nquadrant <- vector(mode = 'numeric', length = nrow(localMI_func))\n#Step 2\nnigeria$lag_pct_func <- lag.listw(rswm_knn8, nigeria$pct_functional)\nDV_func <- nigeria$lag_pct_func - mean(nigeria$lag_pct_func)     \n#Step 3\nLM_I_func <- localMI_func[,1] \n#Step 4\nsignif <- 0.05\n#Step 5\nquadrant[DV_func <0 & LM_I_func>0] <- 1 #low-low\nquadrant[DV_func >0 & LM_I_func<0] <- 2 #high-low\nquadrant[DV_func <0 & LM_I_func<0] <- 3 #low-high\nquadrant[DV_func >0 & LM_I_func>0] <- 4 #high-high\n#Step 6\nquadrant[localMI_func[,5]>signif] <- 0\n\n\nThis is the code chunk to prepare the LISA cluster map.\n\n\nShow the code\n#Assign each region  to its respective quardrant\nnigeria.localMI_func$quadrant <- quadrant\n#Set the colours--one for each quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\") \n\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_func <- tm_shape(nigeria.localMI_func) + \n  tm_fill(col = \"quadrant\",\n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1],\n          labels = clusters[c(sort(unique(quadrant)))+1])  + \n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"LISA Cluster Map \\n (Functional WP) \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\n\nWe will repeat the same steps for non-functional water points.\n\n\nShow the code\n#Step 1\nquadrant <- vector(mode = 'numeric', length = nrow(localMI_nonfunc))\n#Step 2\nnigeria$lag_pct_nonfunc <- lag.listw(rswm_knn8, nigeria$pct_nonfunctional)\nDV_nonfunc <- nigeria$lag_pct_nonfunc - mean(nigeria$lag_pct_nonfunc)     \n#Step 3\nLM_I_nonfunc <- localMI_nonfunc[,1] \n#Step 4\nsignif <- 0.05\n#Step 5\nquadrant[DV_nonfunc <0 & LM_I_nonfunc>0] <- 1 #low-low\nquadrant[DV_nonfunc >0 & LM_I_nonfunc<0] <- 2 #high-low\nquadrant[DV_nonfunc <0 & LM_I_nonfunc<0] <- 3 #low-high\nquadrant[DV_nonfunc >0 & LM_I_nonfunc>0] <- 4 #high-high\n#Step 6\nquadrant[localMI_nonfunc[,5]>signif] <- 0\n\n\nThis is the code chunk to prepare the LISA cluster map.\n\n\nShow the code\n#Assign each region  to its respective quardrant\nnigeria.localMI_nonfunc$quadrant <- quadrant\n#Set the colours--one for each quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\") \n\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_nonfunc <- tm_shape(nigeria.localMI_nonfunc) + \n  tm_fill(col = \"quadrant\",\n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1],\n          labels = clusters[c(sort(unique(quadrant)))+1])  + \n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"LISA Cluster Map \\n (Non-Functional WP) \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\n\nWe can plot the local Moran’s I map (statistically significant values only) and LISA map together. What we will observe is that the shaded regions are the same for each pair of maps.\n\n\nShow the code\ntmap_arrange(localMI_sig_f.map, LISAmap_func,\n  localMI_sig_nf.map, LISAmap_nonfunc, ncol =2)\n\n\n\n\n\nThe LISA maps provides another level of information–which is whether the region have relatively higher or lower percentage of non-functional water points.\nFunctional: From the Local Moran’s I map, we can make out that regions have positive Local Moran’s I values, suggesting that they have neighbours with similarly high or low percentage of functional water points. This would be consistent with the dark blue (low-low) and red (high-high) regions in the LISA map. We can see that the top areas are in red while bottom are in blue.\nNon-functional: From the Local Moran’s I map, we can make out that regions have positive Local Moran’s I values, suggesting that they have neighbours with similarly high or low percentage of non-functional water points. This would be consistent with the dark blue (low-low) and red (high-high) regions in the LISA map. We can see that the top areas are in blue while bottom are in red.\n\n\n5.2.1.4 Interpretation of Results\nOverall, Local Moran’s have revealed significant spatial cluster and outliers.\nFunctional Water points\nFor ease of comparison, here is the map of the percentage of functional water points and the LISA map. I have set the mode to allow for interactive viewing - this means that we can zoom in / out of the map and click on the LGAs too.\n\n\nShow the code\ntmap_mode(\"view\")\ntmap_arrange(\nchoropleth_plot(nigeria, \"pct_functional\", \"pretty\", \"Proportion of Functional water points \\nin Nigeria: partitioned by 'pretty' intervals\"), \n             LISAmap_func)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAt a glance, in the LISA map, we can see two larger clusters–a high-high (red) cluster situation near the top and a low-low (blue) cluster situation near the bottom of the map. We also notice no significant spatial clusters or outliers in the middle/central area of the map. It may be geographically related. The top area borders nearby countries like Niger and Chad while the bottom are coastal areas bordering the Gulf of Guinea.\nThere are four high-high clusters areas. The regions in this area and their neighbours have a high percentage of functional water points The largest one is at the northern portion of the map. In that area, there are pockets of low-high outliers (light blue)--meaning that these areas have a lower percentage of functional water points as compared to their neighbours and may be worth investigating. There is another high-high cluster on the top right. The LGAs sandwiched between the two high-high clusters may also be worth a deeper look.\nThere are around two larger low-low clusters (dark blue). The largest one is in the southern part of the country. There are also pockets of high-low outliers in the same parts. Interestingly, the cluster extends from the coastal areas and move towards the inner parts of the country in a C shape–the centre of the ‘C’ are not identified as cluster or outliers.\nNon-Functional Water Points\nSimilarly, for ease of comparison, here is the map of the percentage of non-functional water points and the LISA map.\n\n\nShow the code\ntmap_mode(\"view\")\ntmap_arrange(\nchoropleth_plot(nigeria, \"pct_nonfunctional\", \"pretty\", \"Proportion of Non-functional water points \\nin Nigeria: partitioned by 'pretty' intervals\"), \n             LISAmap_nonfunc, asp = 1, ncol = 2 )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can see all categories of cluster/outlier classification on the LISA map. The first two observations we can make are that there are two large clusters–one low-low cluster situation near the top and a high-high cluster situation near the bottom of the map. We also notice no significant spatial clusters or outliers in the middle/central area of the map. It may be geographically related. The top area borders nearby countries like Niger and Chad while the bottom are coastal areas bordering the Gulf of Guinea.\nThere are around 6 low-low clusters (dark blue). The regions in this area and their neighbours have a low percentage of non-functional water points. The larger low-low cluster is relatively extensive. It extends from the top middle of the map to the top right corner and consists parts of states like Borno, Yobe, Dutse and Kano.\nThere are four high-high clusters (red). The regions in this area and their neighbours have a high percentage of non-functional water points The largest one extends from bottom, slightly-off centre of the map upwards. This includes LGAs in the states of Edo, Delta and Baylesa. Towards the right, there is another high-high cluster in the state of Cross River. The first and second clusters are relatively close to each other as compared to the remaining two. An interesting area to further study is Kwame and Fumakaye LGAs. They are high-high clusters situated near a large low-low cluster.\nWe see pockets of outliers throughout the country. There are two low-high outliers that are situated next to clusters. The regions have low percentage of non-functional water points while their neighbours have higher percentage of the same. We can see two outliers Bagudo and Fakai near the top left area of the map. The former is situated next to a high-high cluster. There is no low-high clusters towards the top and top right of the map, which is probably because the area has a large low-low spatial cluster. On the other hand, there are pockets of high-low outliers like Tudun Wada and Karaye LGAs.\n\n\n\nStates of Nigeria15\n\n\nComparing both maps, we can see a different in high-high and low-low clusters, it’s almost always inverse. Also, both maps have the similarity where the centre part of the map has no clusters or outliers identified.\n\n\n\n5.2.2 Hot Spot Area Analysis\nIn the sub-section, we will use a local spatial autocorrelation statistic to detect hot or cold spots. Hot spot refers to areas that have higher values relative to its surroundings.\n\n5.2.2.1 Getis and Ord’s G-Statistics\nThe Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995) are alternative spatial statistics to detect spatial anomalies. It looks at each region within the context of its neighbouring features. A statistically significant hot spot will have high values and are surrounded by other areas with high values as well.\nThe Gi statistic is a z-score. For statistically significant and positive z-score, the higher the value, the more intense the clustering of high values is i.e. hot spot. Inversely, for a statistically significant negative z-score, the lower the value, the more intense the clustering of lower values is i.e. cold spot.\nWith reference to the context, we are hence looking for areas where the area itself and its neighbours have a high percentage of non-functional water points (hot spots) and areas where the areas itself and its neighbours have a lower percentage of non-functional water points.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistic\n\nDeriving spatial weights matrix\nGetis-Ord defines neighbours based on distance. The Gi-statistics measures the degree of association that comes about from the concentration of weighted points and all other weighted points included within a radius of distance from the original point16. It included a weight component, which is a binary spatial weight matrix–where 1 represents a link.\n\n\n\nGi(d) Statistic, Getis, A., & Ord, K. (1992)\n\n\nTherefore, we can use the previously derived knn8, and weight it with a binary weight matrix. This can be done using the code chunk here.\n\n\nShow the code\nbwm_knn8 <- nb2listw(knn8,\n                   style = \"B\",\n                   zero.policy = TRUE)\nbwm_knn8\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 6088 \nPercentage nonzero weights: 1.051248 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\nWeights style: B \nWeights constants summary:\n    n     nn   S0    S1     S2\nB 761 579121 6088 10950 198564\n\n\nComputing Gi Statistics\nTo compute the Gi statistics, we can use localG() from spdep package.\n\n\nShow the code\nfips <- order(nigeria$LGA)\ngi.adaptive_func <- localG(nigeria$pct_functional, bwm_knn8)\nnigeria.gi_func <- cbind(nigeria, as.matrix(gi.adaptive_func)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive_func.)\n\n\n\n\nShow the code\nfips <- order(nigeria$LGA)\ngi.adaptive_nonfunc <- localG(nigeria$pct_nonfunctional, bwm_knn8)\nnigeria.gi_nonfunc <- cbind(nigeria, as.matrix(gi.adaptive_nonfunc)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive_nonfunc.)\n\n\nMapping GI Values with Adaptive Distance Weights\nTo visualise the locations of hot spot and cold spot areas, we can use the choropleth mapping functions of tmap package.\nThe below code chunk plots the map for functional water points.\n\n\nShow the code\ntmap_mode(\"plot\")\nGimap_func <- tm_shape(nigeria.gi_func) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\",\n          palette = \"-RdBu\",\n          title = \"local Gi\") + \n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Gi Map \\n (Functional WP)\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\ntmap_arrange(choropleth_plot(nigeria, \"pct_functional\", \"pretty\", \"Proportion of Functional water points \\nin Nigeria: partitioned by 'pretty' intervals\"), \n             Gimap_func) \n\n\n\n\n\nThe below code chunk plots the map for non-functional water points\n\n\nShow the code\ntmap_mode(\"plot\")\nGimap_nonfunc <- tm_shape(nigeria.gi_nonfunc) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\",\n          palette = \"-RdBu\",\n          title = \"local Gi\") + \n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Gi Map \\n (Non-Functional WP) \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\ntmap_arrange(choropleth_plot(nigeria, \"pct_nonfunctional\", \"pretty\", \"Proportion of Non-functional water points \\nin Nigeria: partitioned by 'pretty' intervals\"), \n             Gimap_nonfunc) \n\n\n\n\n\n\n\n5.2.2.2 Interpretation of Results\nBefore we interpret the charts, we should only consider the statistically significant spots. We can refer to the localg()documentation for the critical values of the statistic for the 95th percentile. Since our data has close to 1,000 records, the critical value is +/-3.886. This means that the Gi Statistic is statistically significant if it is more than or less than 3.886.\nWe can use the code chunk below to filter out only the statistically significant spots.\n\n\nShow the code\nnigeria.gi_sig_f <- cbind(nigeria, as.matrix(gi.adaptive_func)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive_func.) %>%\n  filter(gstat_adaptive > 3.886 | gstat_adaptive < -3.886 )\n\nnigeria.gi_sig_nf <- cbind(nigeria, as.matrix(gi.adaptive_nonfunc)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive_nonfunc.) %>%\n  filter(gstat_adaptive > 3.886 | gstat_adaptive < -3.886 )\n\n\nTo visualise the map with statistically significant Gi statistics, we can refer to the code chunk below. I have set the mode to allow for interactive viewing - this means that we can zoom in / out of the map and click on the LGAs too.\nFunctional Water Points\n\n\nShow the code\ntmap_mode(\"view\")\nbase <- tm_shape(nigeria) + \n  tm_fill(col = 'gray98') + \n  tm_borders(alpha = 0.3)\n\nGimap_sig_f <- base + \n  tm_shape(nigeria.gi_sig_f) +\n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\",\n          palette = \"-RdBu\",\n          title = \"Local Gi\") +\n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Local Gi Statistic (Sig.) Map \\n (Functional WP)\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\ntmap_arrange(choropleth_plot(nigeria, \"pct_functional\", \"quantile\", \"Proportion of Functional water points \\nin Nigeria: partitioned by 'pretty' intervals\"), \n             Gimap_sig_f) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Gi statistics have revealed significant pockets of hot (red shades) spot areas and no cold spots. Right away, we observe that these areas are situated mostly in the northern regions. The identified of hot spots are less sparse than what we saw in the LISA map.\nLooking at the hot spots, we see a relatively large hot spot areas at the top of the map. There are areas with higher intensity of functional water points, identified by the darker red shades and areas with less intensity in lighter red shades. This area borders the neighbouring country of Niger. It does seem that the intensity is higher in the outer areas before becoming less intense.\nNon-functional Water Points\n\n\nShow the code\ntmap_mode(\"view\")\nbase <- tm_shape(st_transform(nigeria)) + \n  tm_fill(col = 'gray98') + \n  tm_borders(alpha = 0.3)\n\nGimap_sig_nf <- base + \n  tm_shape(nigeria.gi_sig_nf) +\n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\",\n          palette = \"-RdBu\",\n          title = \"Local Gi\") +\n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Local Gi Statistic (Sig.) Map \\n (Non-functional WP)\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\ntmap_arrange(choropleth_plot(nigeria, \"pct_nonfunctional\", \"quantile\", \"Proportion of Non-functional water points \\nin Nigeria: partitioned by 'pretty' intervals\"), \n             Gimap_sig_nf) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Gi statistics have revealed significant pockets of hot (red shades) and cold (blue shades) spot areas. At first glance, we can see that there are mostly cold spots on the top half of the map and mostly hot spots on the bottom of the map. This pattern is consistent with the LISA map, although the extent of hot/cold areas are different.\nOn the top right area, we can see a cold spot. It includes Bama, Dikwa, Mafa and Monguno with more intense clustering (darker shade of blue). They are situated towards the outer areas / near borders. The area beyond the dark blue shaded region are LGAs without water points at all (no data recorded). This may signify the importance of these water points and probably and importance to ensure they are all functional. The lower percentage of non-functional water points could also be because of the lower number of water points in the area, which increase the importance of existing water points. Towards the left, we have Gumel and Maigatari, Miga and Jahun that are also cold spots.\nLooking at the hot spots, we see some at the bottom right of the map. At the coastal border, we have more intense clustering (dark red), suggesting higher number of non-functional water points in that area. Towards the mainland, the clustering is less intense but with pockets of dark reds."
  },
  {
    "objectID": "Exercises/Take-home_Ex1/Take-home_Ex1.html#future-works",
    "href": "Exercises/Take-home_Ex1/Take-home_Ex1.html#future-works",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "6.1 Future Works",
    "text": "6.1 Future Works\nWe can explore the impact of living near the borders–either to the neighbouring countries or coastal areas. It would also be interesting to deep dive into location that are near rivers like the Niger or Benou.\nIt would also be interesting to bring in the water sources e.g., tap, well, etc., into the dataset and see if is any relationship between type of water source and its functional status. This applies for other demographic factors like population size, income level and education level."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "In this webpage, I am going to share with you my learning journey of geospatial analytics."
  },
  {
    "objectID": "Exercises/In-class_Ex3/In-class_Ex3.html",
    "href": "Exercises/In-class_Ex3/In-class_Ex3.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "This in-class exercise is an extension of Hands-on Exercise 3. In this exercise, we will explore another spatially constrained clustering method called ClustGeo.\nNote: The first three sections are also covered in Hands-on Exercise 3. They cover the task at hand, data import and prepartion.\n\n\nIn geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data.\nIn this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home.\n\n\n\nTwo data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets can be retrieved from Myanmar Information Management Unit (MIMU)\n\n\n\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, which includes readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\nOther analysis packages\n\nfactoextra: extract and visualize the output of exploratory multivariate data analyses, including: principal component analysis (PCA) and multiple factor analysis (MFA)\nNbClust: assess hierarchical clustering results to help determine the optimal number of classess\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\n\nShow the code\npacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse)"
  },
  {
    "objectID": "Exercises/In-class_Ex3/In-class_Ex3.html#importing-geospatial-data-into-r-environment",
    "href": "Exercises/In-class_Ex3/In-class_Ex3.html#importing-geospatial-data-into-r-environment",
    "title": "In-class Exercise 3",
    "section": "2.1 Importing geospatial data into R environment",
    "text": "2.1 Importing geospatial data into R environment\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\n\n\nShow the code\nshan_sf <- st_read(dsn = 'data\\\\geospatial',\n                   layer = 'myanmar_township_boundaries') %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\ameliachuayt\\ISSS624\\Exercises\\In-class_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. Note that it is in the WGS 84 geographic coordinates system. The Bounding box also informs us that the data is in the decimal degrees, which is consistent with the WGS 84 geographic coordinates system.\nWe can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\n\nShow the code\nshan_sf\n\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\nWe can see that there are 55 rows and 15 columns.\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework. Since shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\n\nShow the code\nglimpse(shan_sf)\n\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Exercises/In-class_Ex3/In-class_Ex3.html#importing-aspatial-data-into-r-environment",
    "href": "Exercises/In-class_Ex3/In-class_Ex3.html#importing-aspatial-data-into-r-environment",
    "title": "In-class Exercise 3",
    "section": "2.2 Importing aspatial data into R environment",
    "text": "2.2 Importing aspatial data into R environment\nThe csv file will be import using read_csv function of readr package. The code chunks used are shown below:\n\n\nShow the code\nict <- read_csv(\"data\\\\aspatial\\\\Shan-ICT.csv\")\n\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s tibble data.frame format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\n\nShow the code\nsummary(ict)\n\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame."
  },
  {
    "objectID": "Exercises/In-class_Ex3/In-class_Ex3.html#derive-new-variables-using-dplyr-package",
    "href": "Exercises/In-class_Ex3/In-class_Ex3.html#derive-new-variables-using-dplyr-package",
    "title": "In-class Exercise 3",
    "section": "2.3 Derive new variables using dplyr package",
    "text": "2.3 Derive new variables using dplyr package\nThe unit of measurement of the values are number of households. Generally, townships with relatively higher number of households will also have a higher number of households that owns radios, TVs, etc. Therefore, there is an inherent bias if w were to use the ict value directly.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\n\nShow the code\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\n\nShow the code\nsummary(ict_derived)\n\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\n\n2.3.1 Joining geospatial data with aspatial data\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object shan_sf and aspatial data.frame object ict_derived. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\n\nShow the code\nshan_sf <- left_join(shan_sf, ict_derived, \n                     by = c(\"TS_PCODE\" = \"TS_PCODE\"))\n\n\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf."
  },
  {
    "objectID": "Exercises/In-class_Ex3/In-class_Ex3.html#extracting-clustering-variables",
    "href": "Exercises/In-class_Ex3/In-class_Ex3.html#extracting-clustering-variables",
    "title": "In-class Exercise 3",
    "section": "3.1 Extracting Clustering Variables",
    "text": "3.1 Extracting Clustering Variables\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\n\nShow the code\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\n\nShow the code\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\n\nShow the code\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709"
  },
  {
    "objectID": "Exercises/In-class_Ex3/In-class_Ex3.html#data-standardisation",
    "href": "Exercises/In-class_Ex3/In-class_Ex3.html#data-standardisation",
    "title": "In-class Exercise 3",
    "section": "3.2 Data Standardisation",
    "text": "3.2 Data Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result to be biased towards clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n3.2.1 Min-Max Standardisation\nIn the code chunk below, normalize() of heatmaply package is used to standardisation the clustering variables by using Min-Max method. The normalize function to brings data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations. summary() is then used to display the summary statistics of the standardised clustering variables.\n\n\nShow the code\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice the change in the range of the values.\n\n\n3.2.2 Z-score Standardisation\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to standardisation the clustering variables by using Z-score method\n\n\nShow the code\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the former provides standard deviation."
  },
  {
    "objectID": "Exercises/In-class_Ex3/In-class_Ex3.html#visualising-the-standardised-clustering-variables",
    "href": "Exercises/In-class_Ex3/In-class_Ex3.html#visualising-the-standardised-clustering-variables",
    "title": "In-class Exercise 3",
    "section": "3.3 Visualising the standardised clustering variables",
    "text": "3.3 Visualising the standardised clustering variables\nBesides reviewing summary statistics of standardised clustering variables, it is a good practice to visualise their distribution graphically.\nThe code chunk below plot the scaled Radio_PR field.\n\n\nShow the code\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"No Standardisation\") + \n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\") + \n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\") + \n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\nNotice that the overall distribution of the clustering variables will change after the data standardisation. Hence, it is advisable NOT to perform data standardisation if the values range of the clustering variables are not very large."
  },
  {
    "objectID": "Exercises/In-class_Ex3/In-class_Ex3.html#computing-proximity-matrix",
    "href": "Exercises/In-class_Ex3/In-class_Ex3.html#computing-proximity-matrix",
    "title": "In-class Exercise 3",
    "section": "3.4 Computing Proximity Matrix",
    "text": "3.4 Computing Proximity Matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\n\nShow the code\nproxmat <- dist(shan_ict, method = 'euclidean')\n\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\n\nShow the code\nproxmat\n\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613"
  },
  {
    "objectID": "Exercises/In-class_Ex3/In-class_Ex3.html#section",
    "href": "Exercises/In-class_Ex3/In-class_Ex3.html#section",
    "title": "In-class Exercise 3",
    "section": "3.5 ",
    "text": "3.5"
  },
  {
    "objectID": "Exercises/In-class_Ex3/In-class_Ex3.html#ward-like-hierarchical-clustering-clustgeo",
    "href": "Exercises/In-class_Ex3/In-class_Ex3.html#ward-like-hierarchical-clustering-clustgeo",
    "title": "In-class Exercise 3",
    "section": "4.1 Ward-like Hierarchical Clustering: ClustGeo",
    "text": "4.1 Ward-like Hierarchical Clustering: ClustGeo\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering. This is similar to hclust() in base R.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\n\nShow the code\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). We can use class() of base R to check the class of the proxmat object.\n\n\nShow the code\nclass(proxmat)\n\n\n[1] \"dist\"\n\n\n\n4.1.1 Mapping the clusters formed\nWe can plot the clusters on a categorical area shaded map by using the below code chunks.\n\n\nShow the code\ngroups <- as.factor(cutree(nongeo_cluster, k = 6))\n\n\n\n\nShow the code\nshan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\n\n\nShow the code\nhclust_clustgeo.map <- qtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\nAs we can see, we have 6 clusters within the Shan state. The clusters formed are fragmented as the traditional clustering method is not spatially constrained.\n\n\n4.1.2 Spatially Constrained Hierarchical Clustering\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package. In ClustGeo we can include either the distance matrix of the contiguity matrix. This is more flexible as compared to SKATER. Although, in ClustGeo, we are unable to specify other hierarchical clustering methods e.g., minimum, maximum, etc., besides Ward’s clustering.\n\n\nShow the code\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below. Here, we consider and balance two matrices: D0 attribute space used for traditional hierarchical clustering and D1 refers to the spatial contiguity matrix. The method seeks to retain attribute homogeneity and satisfy spatial homogeneity at the same time.\nThe alpha value ranges from 0 to 1. When alpha value = 0, we consider only the attribute attributes. When alpha value = 1, we consider only the spatial attributes. Note that the range.alpha= parameter specifies the range of the x-axis according to (min, max, increment). In this case, the x-axis ranges from 0 to 1 and is in 0.1 increments.\n\n\nShow the code\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\nThere are two graphs output. The first graph is in the ‘raw’ or non-standardised form. In the second graph, we can see that the y-axis have been standardised such that it ranges from 0 to 1.\nBased on the graph above, at approximately alpha = 0.3 - we have a balance of spatial and attribute homogeneity. We ‘lose’ less than 20-30% of spatial and attribute homogenity (2nd graph).\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below to derive the cluster object.\n\n\nShow the code\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.3)\n\n\nNext, cutree() is used to derive the cluster objecct.\n\n\nShow the code\ngroups <- as.factor(cutree(clustG, k=6))\n\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\n\nShow the code\nshan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\n\nShow the code\nclustgeo.map <- qtm(shan_sf_Gcluster, \"CLUSTER\")\nclustgeo.map\n\n\n\n\n\nFor ease of comparison, We will place both the hierarchical clustering and spatially constrained hierarchical clustering maps developed using ClustGeo package next to each other.\n\n\nShow the code\ntmap_arrange(hclust_clustgeo.map, clustgeo.map,\n             asp=NA, ncol=2)\n\n\n\n\n\nCompared to the traditional hierarchical clustering algorithm, the GeoClust spatially constrained method yields clusters are less fragmented as the distance of the features are considered.\nCompared to SKATER that is a hard-clustering method, ClustGeo is a soft-clustering method. In SKATER, the minimum spanning tree requires polygon features to be adjacent whereas this requirement is not in ClustGeo (which is why we could also choose between using a contiguity matrix or using distance (st_distance()). This specification ultimately affects the final maps that are formed."
  }
]